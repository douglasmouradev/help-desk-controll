-- Sistema Help Desk Controll IT - Estrutura para PostgreSQL (Heroku)-- Compatível com PostgreSQL-- Tabela de usuáriosCREATE TABLE users (    id SERIAL PRIMARY KEY,    name VARCHAR(255) NOT NULL,    email VARCHAR(255) UNIQUE NOT NULL,    username VARCHAR(100) UNIQUE NOT NULL,    password_hash VARCHAR(255) NOT NULL,    user_type VARCHAR(20) NOT NULL DEFAULT 'user' CHECK (user_type IN ('user', 'support', 'admin')),    role_id INTEGER,    department_id INTEGER,    active BOOLEAN NOT NULL DEFAULT TRUE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);-- Tabela para rolesCREATE TABLE roles (    id SERIAL PRIMARY KEY,    name VARCHAR(100) NOT NULL UNIQUE,    description TEXT,    is_active BOOLEAN DEFAULT TRUE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);-- Tabela para permissõesCREATE TABLE permissions (    id SERIAL PRIMARY KEY,    name VARCHAR(100) NOT NULL UNIQUE,    description TEXT,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);-- Tabela para permissões de usuárioCREATE TABLE user_permissions (    id SERIAL PRIMARY KEY,    user_id INTEGER NOT NULL,    permission_id INTEGER NOT NULL,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,    FOREIGN KEY (permission_id) REFERENCES permissions(id) ON DELETE CASCADE,    UNIQUE (user_id, permission_id));-- Tabela para permissões de roleCREATE TABLE role_permissions (    id SERIAL PRIMARY KEY,    role_id INTEGER NOT NULL,    permission_id INTEGER NOT NULL,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE,    FOREIGN KEY (permission_id) REFERENCES permissions(id) ON DELETE CASCADE,    UNIQUE (role_id, permission_id));-- Tabela para departamentosCREATE TABLE departments (    id SERIAL PRIMARY KEY,    name VARCHAR(100) NOT NULL UNIQUE,    description TEXT,    manager_id INTEGER,    color VARCHAR(7),    is_active BOOLEAN DEFAULT TRUE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (manager_id) REFERENCES users(id) ON DELETE SET NULL);-- Tabela para categoriasCREATE TABLE categories (    id SERIAL PRIMARY KEY,    name VARCHAR(100) NOT NULL UNIQUE,    description TEXT,    parent_id INTEGER,    color VARCHAR(7),    icon VARCHAR(50),    is_active BOOLEAN DEFAULT TRUE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (parent_id) REFERENCES categories(id) ON DELETE SET NULL);-- Tabela para tagsCREATE TABLE tags (    id SERIAL PRIMARY KEY,    name VARCHAR(100) NOT NULL UNIQUE,    color VARCHAR(7),    description TEXT,    is_active BOOLEAN DEFAULT TRUE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);-- Tabela principal de chamadosCREATE TABLE tickets (    id SERIAL PRIMARY KEY,    title VARCHAR(255) NOT NULL,    description TEXT NOT NULL,    category VARCHAR(100) NOT NULL,    priority VARCHAR(20) NOT NULL DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high', 'critical')),    status VARCHAR(20) NOT NULL DEFAULT 'open' CHECK (status IN ('open', 'in_progress', 'closed', 'cancelled')),    user_id INTEGER NOT NULL,    assigned_to INTEGER,    department_id INTEGER,    rating INTEGER CHECK (rating >= 1 AND rating <= 5),    tags TEXT,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    closed_at TIMESTAMP,        FOREIGN KEY (user_id) REFERENCES users(id),    FOREIGN KEY (assigned_to) REFERENCES users(id),    FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE SET NULL);-- Tabela para tags de ticketsCREATE TABLE ticket_tags (    id SERIAL PRIMARY KEY,    ticket_id INTEGER NOT NULL,    tag_id INTEGER NOT NULL,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE,    FOREIGN KEY (tag_id) REFERENCES tags(id) ON DELETE CASCADE,    UNIQUE (ticket_id, tag_id));-- Tabela para comentários de ticketsCREATE TABLE ticket_comments (    id SERIAL PRIMARY KEY,    ticket_id INTEGER NOT NULL,    comment TEXT NOT NULL,    created_by INTEGER NOT NULL,    is_internal BOOLEAN DEFAULT FALSE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE,    FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE);-- Tabela para anexos de ticketsCREATE TABLE ticket_attachments (    id SERIAL PRIMARY KEY,    ticket_id INTEGER NOT NULL,    filename VARCHAR(255) NOT NULL,    original_name VARCHAR(255) NOT NULL,    file_path VARCHAR(500) NOT NULL,    file_size INTEGER NOT NULL,    mime_type VARCHAR(100) NOT NULL,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE);-- Tabela para workflowsCREATE TABLE workflows (    id SERIAL PRIMARY KEY,    name VARCHAR(100) NOT NULL,    description TEXT,    conditions JSONB,    actions JSONB,    is_active BOOLEAN DEFAULT TRUE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);-- Tabela para regras de SLACREATE TABLE sla_rules (    id SERIAL PRIMARY KEY,    category VARCHAR(100) NOT NULL,    priority VARCHAR(20) NOT NULL,    response_time_hours INTEGER NOT NULL,    resolution_time_hours INTEGER NOT NULL,    is_active BOOLEAN DEFAULT TRUE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    UNIQUE (category, priority));-- Tabela para violações de SLACREATE TABLE sla_violations (    id SERIAL PRIMARY KEY,    ticket_id INTEGER NOT NULL,    violation_type VARCHAR(20) NOT NULL CHECK (violation_type IN ('response', 'resolution')),    hours_elapsed INTEGER NOT NULL,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE);-- Tabela para notificaçõesCREATE TABLE notifications (    id SERIAL PRIMARY KEY,    user_id INTEGER NOT NULL,    type VARCHAR(50) NOT NULL,    title VARCHAR(255) NOT NULL,    message TEXT NOT NULL,    ticket_id INTEGER,    priority VARCHAR(20) DEFAULT 'normal' CHECK (priority IN ('low', 'normal', 'high', 'critical')),    is_read BOOLEAN DEFAULT FALSE,    read_at TIMESTAMP,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,    FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE);-- Tabela para logs de auditoriaCREATE TABLE audit_logs (    id SERIAL PRIMARY KEY,    user_id INTEGER,    action VARCHAR(100) NOT NULL,    resource VARCHAR(100) NOT NULL,    resource_id INTEGER,    details JSONB,    ip_address VARCHAR(45),    user_agent TEXT,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL);-- Tabela para rate limitingCREATE TABLE rate_limits (    id SERIAL PRIMARY KEY,    identifier VARCHAR(255) NOT NULL,    ip_address VARCHAR(45) NOT NULL,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);-- Adicionar foreign keys para usersALTER TABLE users ADD FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE SET NULL;ALTER TABLE users ADD FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE SET NULL;-- Criar índices para performanceCREATE INDEX idx_users_email ON users(email);CREATE INDEX idx_users_username ON users(username);CREATE INDEX idx_users_user_type ON users(user_type);CREATE INDEX idx_users_active ON users(active);CREATE INDEX idx_tickets_user_id ON tickets(user_id);CREATE INDEX idx_tickets_assigned_to ON tickets(assigned_to);CREATE INDEX idx_tickets_status ON tickets(status);CREATE INDEX idx_tickets_priority ON tickets(priority);CREATE INDEX idx_tickets_category ON tickets(category);CREATE INDEX idx_tickets_created_at ON tickets(created_at);CREATE INDEX idx_tickets_updated_at ON tickets(updated_at);CREATE INDEX idx_notifications_user_id ON notifications(user_id);CREATE INDEX idx_notifications_is_read ON notifications(is_read);CREATE INDEX idx_notifications_created_at ON notifications(created_at);CREATE INDEX idx_audit_logs_user_id ON audit_logs(user_id);CREATE INDEX idx_audit_logs_action ON audit_logs(action);CREATE INDEX idx_audit_logs_created_at ON audit_logs(created_at);CREATE INDEX idx_rate_limits_identifier ON rate_limits(identifier);CREATE INDEX idx_rate_limits_created_at ON rate_limits(created_at);-- Inserir dados iniciaisINSERT INTO roles (name, description) VALUES('Admin', 'Administrador do sistema com acesso total'),('Manager', 'Gerente com acesso a relatórios e gerenciamento'),('Support', 'Agente de suporte com acesso a tickets'),('User', 'Usuário final com acesso limitado');INSERT INTO permissions (name, description) VALUES('admin', 'Acesso total ao sistema'),('manage_users', 'Gerenciar usuários'),('manage_tickets', 'Gerenciar tickets'),('view_reports', 'Visualizar relatórios'),('manage_settings', 'Gerenciar configurações'),('view_tickets', 'Visualizar tickets'),('edit_tickets', 'Editar tickets'),('delete_tickets', 'Deletar tickets'),('manage_notifications', 'Gerenciar notificações');INSERT INTO departments (name, description, color) VALUES('Technical Support', 'Suporte técnico e resolução de problemas', '#3498db'),('Billing', 'Cobrança e questões financeiras', '#e74c3c'),('Sales', 'Vendas e novos clientes', '#2ecc71'),('Development', 'Desenvolvimento e programação', '#9b59b6');INSERT INTO categories (name, description, color, icon) VALUES('Technical Support', 'Problemas técnicos e suporte', '#3498db', 'wrench'),('Billing', 'Problemas de cobrança e pagamento', '#e74c3c', 'credit-card'),('General Inquiry', 'Consultas gerais', '#2ecc71', 'question-circle'),('Bug Report', 'Relatórios de bugs', '#f39c12', 'bug');INSERT INTO tags (name, color, description) VALUES('urgent', '#e74c3c', 'Tickets urgentes que requerem atenção imediata'),('bug', '#f39c12', 'Bugs reportados no sistema'),('feature', '#2ecc71', 'Solicitações de novas funcionalidades'),('documentation', '#3498db', 'Problemas relacionados à documentação');INSERT INTO sla_rules (category, priority, response_time_hours, resolution_time_hours) VALUES('Technical Support', 'low', 24, 72),('Technical Support', 'medium', 12, 48),('Technical Support', 'high', 4, 24),('Technical Support', 'critical', 1, 8),('Billing', 'low', 48, 120),('Billing', 'medium', 24, 72),('Billing', 'high', 12, 48),('Billing', 'critical', 4, 24);-- Criar usuário administrador padrãoINSERT INTO users (name, email, username, password_hash, user_type, role_id) VALUES('Administrador', 'admin@controllit.com.br', 'admin', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'admin', 1);-- Atribuir permissões de adminINSERT INTO user_permissions (user_id, permission_id) VALUES(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9);-- Criar usuários de testeINSERT INTO users (name, email, username, password_hash, user_type, role_id) VALUES('Agente de Suporte', 'suporte@controllit.com.br', 'suporte', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'support', 3),('Usuário Padrão', 'usuario@controllit.com.br', 'usuario', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'user', 4);-- Criar alguns tickets de exemploINSERT INTO tickets (title, description, category, priority, status, user_id) VALUES('Problema com impressora', 'A impressora não está funcionando corretamente.', 'Technical Support', 'medium', 'open', 3),('Sistema lento', 'O sistema está muito lento.', 'Technical Support', 'high', 'in_progress', 3),('Acesso ao email', 'Não consigo acessar minha conta de email.', 'Technical Support', 'low', 'closed', 3);