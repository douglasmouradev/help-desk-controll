-- Sistema Help Desk Controll IT - Estrutura do Banco de Dados-- Compatível com MySQL/MariaDB, PostgreSQL, SQL Server-- Tabela de usuáriosCREATE TABLE users (    id INT PRIMARY KEY AUTO_INCREMENT,    name VARCHAR(255) NOT NULL,    email VARCHAR(255) UNIQUE NOT NULL,    username VARCHAR(100) UNIQUE NOT NULL,    password_hash VARCHAR(255) NOT NULL,    user_type ENUM('user', 'support', 'admin') NOT NULL DEFAULT 'user',    active BOOLEAN NOT NULL DEFAULT TRUE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,        INDEX idx_email (email),    INDEX idx_username (username),    INDEX idx_user_type (user_type),    INDEX idx_active (active));-- Tabela de categorias de chamadosCREATE TABLE ticket_categories (    id INT PRIMARY KEY AUTO_INCREMENT,    name VARCHAR(100) NOT NULL UNIQUE,    description TEXT,    active BOOLEAN NOT NULL DEFAULT TRUE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);-- Tabela de prioridadesCREATE TABLE ticket_priorities (    id INT PRIMARY KEY AUTO_INCREMENT,    name VARCHAR(50) NOT NULL UNIQUE,    level INT NOT NULL UNIQUE, -- 1=Baixa, 2=Média, 3=Alta, 4=Crítica    color VARCHAR(7) NOT NULL, -- Código hexadecimal da cor    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);-- Tabela de statusCREATE TABLE ticket_statuses (    id INT PRIMARY KEY AUTO_INCREMENT,    name VARCHAR(50) NOT NULL UNIQUE,    slug VARCHAR(50) NOT NULL UNIQUE, -- Para uso no código    color VARCHAR(7) NOT NULL,    is_final BOOLEAN NOT NULL DEFAULT FALSE, -- Se é um status final (fechado)    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);-- Tabela principal de chamadosCREATE TABLE tickets (    id INT PRIMARY KEY AUTO_INCREMENT,    title VARCHAR(255) NOT NULL,    description TEXT NOT NULL,    category_id INT NOT NULL,    priority_id INT NOT NULL,    status_id INT NOT NULL DEFAULT 1,    user_id INT NOT NULL,    assigned_to INT NULL,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,    closed_at TIMESTAMP NULL,        FOREIGN KEY (category_id) REFERENCES ticket_categories(id),    FOREIGN KEY (priority_id) REFERENCES ticket_priorities(id),    FOREIGN KEY (status_id) REFERENCES ticket_statuses(id),    FOREIGN KEY (user_id) REFERENCES users(id),    FOREIGN KEY (assigned_to) REFERENCES users(id),        INDEX idx_user_id (user_id),    INDEX idx_assigned_to (assigned_to),    INDEX idx_status_id (status_id),    INDEX idx_priority_id (priority_id),    INDEX idx_category_id (category_id),    INDEX idx_created_at (created_at),    INDEX idx_updated_at (updated_at));-- Tabela de comentários/atualizações dos chamadosCREATE TABLE ticket_comments (    id INT PRIMARY KEY AUTO_INCREMENT,    ticket_id INT NOT NULL,    user_id INT NOT NULL,    comment TEXT NOT NULL,    is_internal BOOLEAN NOT NULL DEFAULT FALSE, -- Se é comentário interno (não visível para o usuário)    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,        FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE,    FOREIGN KEY (user_id) REFERENCES users(id),        INDEX idx_ticket_id (ticket_id),    INDEX idx_user_id (user_id),    INDEX idx_created_at (created_at));-- Tabela de anexos dos chamadosCREATE TABLE ticket_attachments (    id INT PRIMARY KEY AUTO_INCREMENT,    ticket_id INT NOT NULL,    filename VARCHAR(255) NOT NULL,    original_filename VARCHAR(255) NOT NULL,    file_path VARCHAR(500) NOT NULL,    file_size INT NOT NULL,    mime_type VARCHAR(100) NOT NULL,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,        FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE,        INDEX idx_ticket_id (ticket_id),    INDEX idx_created_at (created_at));-- Tabela de anexos dos chamadosCREATE TABLE ticket_attachments (    id INT PRIMARY KEY AUTO_INCREMENT,    ticket_id INT NOT NULL,    filename VARCHAR(255) NOT NULL,    original_filename VARCHAR(255) NOT NULL,    file_path VARCHAR(500) NOT NULL,    file_size INT NOT NULL,    mime_type VARCHAR(100) NOT NULL,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,        FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE,        INDEX idx_ticket_id (ticket_id),    INDEX idx_created_at (created_at));-- Tabela de histórico de alteraçõesCREATE TABLE ticket_history (    id INT PRIMARY KEY AUTO_INCREMENT,    ticket_id INT NOT NULL,    user_id INT NOT NULL,    field_name VARCHAR(100) NOT NULL,    old_value TEXT,    new_value TEXT,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,        FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE,    FOREIGN KEY (user_id) REFERENCES users(id),        INDEX idx_ticket_id (ticket_id),    INDEX idx_user_id (user_id),    INDEX idx_created_at (created_at));-- Tabela de anexosCREATE TABLE ticket_attachments (    id INT PRIMARY KEY AUTO_INCREMENT,    ticket_id INT NOT NULL,    user_id INT NOT NULL,    filename VARCHAR(255) NOT NULL,    original_filename VARCHAR(255) NOT NULL,    file_path VARCHAR(500) NOT NULL,    file_size INT NOT NULL,    mime_type VARCHAR(100) NOT NULL,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,        FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE,    FOREIGN KEY (user_id) REFERENCES users(id),        INDEX idx_ticket_id (ticket_id),    INDEX idx_user_id (user_id));-- Tabela de configurações do sistemaCREATE TABLE system_settings (    id INT PRIMARY KEY AUTO_INCREMENT,    setting_key VARCHAR(100) NOT NULL UNIQUE,    setting_value TEXT,    description TEXT,    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP);-- Tabela de logs de acessoCREATE TABLE access_logs (    id INT PRIMARY KEY AUTO_INCREMENT,    user_id INT,    ip_address VARCHAR(45) NOT NULL,    user_agent TEXT,    action VARCHAR(100) NOT NULL,    resource VARCHAR(255),    success BOOLEAN NOT NULL,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL,        INDEX idx_user_id (user_id),    INDEX idx_ip_address (ip_address),    INDEX idx_created_at (created_at),    INDEX idx_action (action));-- Tabela de logs de acessoCREATE TABLE access_logs (    id INT PRIMARY KEY AUTO_INCREMENT,    user_id INT NULL,    ip_address VARCHAR(45) NOT NULL,    user_agent TEXT,    action VARCHAR(100) NOT NULL,    resource VARCHAR(255) NULL,    success BOOLEAN NOT NULL DEFAULT TRUE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL,        INDEX idx_user_id (user_id),    INDEX idx_action (action),    INDEX idx_success (success),    INDEX idx_created_at (created_at));-- Tabela de logs de acessoCREATE TABLE access_logs (    id INT PRIMARY KEY AUTO_INCREMENT,    user_id INT NULL,    ip_address VARCHAR(45) NOT NULL,    user_agent TEXT,    action VARCHAR(100) NOT NULL,    resource VARCHAR(255) NULL,    success BOOLEAN NOT NULL DEFAULT TRUE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL,        INDEX idx_user_id (user_id),    INDEX idx_action (action),    INDEX idx_success (success),    INDEX idx_created_at (created_at));-- Inserir dados iniciaisINSERT INTO ticket_categories (name, description) VALUES('Hardware', 'Problemas relacionados a equipamentos físicos'),('Software', 'Problemas com programas e aplicativos'),('Rede', 'Problemas de conectividade e infraestrutura de rede'),('E-mail', 'Problemas com sistema de e-mail'),('Outros', 'Outros tipos de problemas');INSERT INTO ticket_priorities (name, level, color) VALUES('Baixa', 1, '#10b981'),('Média', 2, '#f59e0b'),('Alta', 3, '#ef4444'),('Crítica', 4, '#dc2626');INSERT INTO ticket_statuses (name, slug, color, is_final) VALUES('Aberto', 'aberto', '#f59e0b', FALSE),('Em Andamento', 'em_andamento', '#3b82f6', FALSE),('Fechado', 'fechado', '#10b981', TRUE),('Cancelado', 'cancelado', '#6b7280', TRUE);INSERT INTO system_settings (setting_key, setting_value, description) VALUES('system_name', 'Controll IT Help Desk', 'Nome do sistema'),('max_file_size', '10485760', 'Tamanho máximo de arquivo em bytes (10MB)'),('allowed_file_types', 'jpg,jpeg,png,gif,pdf,doc,docx,xls,xlsx,txt', 'Tipos de arquivo permitidos'),('auto_assign_tickets', 'false', 'Atribuição automática de chamados'),('notification_email', 'suporte@controllit.com.br', 'E-mail para notificações');-- Criar usuário administrador padrãoINSERT INTO users (name, email, username, password_hash, user_type) VALUES('Administrador', 'admin@controllit.com.br', 'admin', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'admin');-- Senha padrão: 'password' (deve ser alterada no primeiro acesso)-- Views para facilitar consultasCREATE VIEW v_tickets_full ASSELECT     t.id,    t.title,    t.description,    t.created_at,    t.updated_at,    t.closed_at,    u.name as user_name,    u.email as user_email,    at.name as assigned_to_name,    at.email as assigned_to_email,    tc.name as category_name,    tp.name as priority_name,    tp.level as priority_level,    tp.color as priority_color,    ts.name as status_name,    ts.slug as status_slug,    ts.color as status_color,    ts.is_final as status_is_final,    CASE         WHEN t.closed_at IS NOT NULL THEN             TIMESTAMPDIFF(HOUR, t.created_at, t.closed_at)        ELSE NULL     END as resolution_time_hoursFROM tickets tLEFT JOIN users u ON t.user_id = u.idLEFT JOIN users at ON t.assigned_to = at.idLEFT JOIN ticket_categories tc ON t.category_id = tc.idLEFT JOIN ticket_priorities tp ON t.priority_id = tp.idLEFT JOIN ticket_statuses ts ON t.status_id = ts.id;-- View para estatísticas de usuáriosCREATE VIEW v_user_stats ASSELECT     u.id,    u.name,    u.email,    u.user_type,    COUNT(t.id) as total_tickets,    COUNT(CASE WHEN ts.slug = 'aberto' THEN 1 END) as open_tickets,    COUNT(CASE WHEN ts.slug = 'em_andamento' THEN 1 END) as in_progress_tickets,    COUNT(CASE WHEN ts.is_final = TRUE THEN 1 END) as closed_tickets,    AVG(CASE         WHEN t.closed_at IS NOT NULL THEN             TIMESTAMPDIFF(HOUR, t.created_at, t.closed_at)        ELSE NULL     END) as avg_resolution_timeFROM users uLEFT JOIN tickets t ON u.id = t.user_idLEFT JOIN ticket_statuses ts ON t.status_id = ts.idGROUP BY u.id, u.name, u.email, u.user_type;