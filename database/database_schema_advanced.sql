-- Sistema Help Desk Controll IT - Estrutura Avançada do Banco de Dados-- Compatível com MySQL/MariaDB-- Tabela de usuáriosCREATE TABLE users (    id INT PRIMARY KEY AUTO_INCREMENT,    name VARCHAR(255) NOT NULL,    email VARCHAR(255) UNIQUE NOT NULL,    username VARCHAR(100) UNIQUE NOT NULL,    password_hash VARCHAR(255) NOT NULL,    user_type ENUM('user', 'support', 'admin') NOT NULL DEFAULT 'user',    role_id INT,    department_id INT,    active BOOLEAN NOT NULL DEFAULT TRUE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,        INDEX idx_email (email),    INDEX idx_username (username),    INDEX idx_user_type (user_type),    INDEX idx_active (active));-- Tabela para rolesCREATE TABLE roles (    id INT AUTO_INCREMENT PRIMARY KEY,    name VARCHAR(100) NOT NULL UNIQUE,    description TEXT,    is_active BOOLEAN DEFAULT TRUE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);-- Tabela para permissõesCREATE TABLE permissions (    id INT AUTO_INCREMENT PRIMARY KEY,    name VARCHAR(100) NOT NULL UNIQUE,    description TEXT,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);-- Tabela para permissões de usuárioCREATE TABLE user_permissions (    id INT AUTO_INCREMENT PRIMARY KEY,    user_id INT NOT NULL,    permission_id INT NOT NULL,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,    FOREIGN KEY (permission_id) REFERENCES permissions(id) ON DELETE CASCADE,    UNIQUE KEY unique_user_permission (user_id, permission_id));-- Tabela para permissões de roleCREATE TABLE role_permissions (    id INT AUTO_INCREMENT PRIMARY KEY,    role_id INT NOT NULL,    permission_id INT NOT NULL,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE,    FOREIGN KEY (permission_id) REFERENCES permissions(id) ON DELETE CASCADE,    UNIQUE KEY unique_role_permission (role_id, permission_id));-- Tabela para departamentosCREATE TABLE departments (    id INT AUTO_INCREMENT PRIMARY KEY,    name VARCHAR(100) NOT NULL UNIQUE,    description TEXT,    manager_id INT,    color VARCHAR(7),    is_active BOOLEAN DEFAULT TRUE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (manager_id) REFERENCES users(id) ON DELETE SET NULL);-- Tabela para categoriasCREATE TABLE categories (    id INT AUTO_INCREMENT PRIMARY KEY,    name VARCHAR(100) NOT NULL UNIQUE,    description TEXT,    parent_id INT,    color VARCHAR(7),    icon VARCHAR(50),    is_active BOOLEAN DEFAULT TRUE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (parent_id) REFERENCES categories(id) ON DELETE SET NULL);-- Tabela para tagsCREATE TABLE tags (    id INT AUTO_INCREMENT PRIMARY KEY,    name VARCHAR(100) NOT NULL UNIQUE,    color VARCHAR(7),    description TEXT,    is_active BOOLEAN DEFAULT TRUE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);-- Tabela principal de chamadosCREATE TABLE tickets (    id INT PRIMARY KEY AUTO_INCREMENT,    title VARCHAR(255) NOT NULL,    description TEXT NOT NULL,    category VARCHAR(100) NOT NULL,    priority ENUM('low', 'medium', 'high', 'critical') NOT NULL DEFAULT 'medium',    status ENUM('open', 'in_progress', 'closed', 'cancelled') NOT NULL DEFAULT 'open',    user_id INT NOT NULL,    assigned_to INT NULL,    department_id INT,    rating INT,    tags TEXT,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,    closed_at TIMESTAMP NULL,        FOREIGN KEY (user_id) REFERENCES users(id),    FOREIGN KEY (assigned_to) REFERENCES users(id),    FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE SET NULL,    CONSTRAINT chk_rating CHECK (rating >= 1 AND rating <= 5),        INDEX idx_user_id (user_id),    INDEX idx_assigned_to (assigned_to),    INDEX idx_status (status),    INDEX idx_priority (priority),    INDEX idx_category (category),    INDEX idx_created_at (created_at),    INDEX idx_updated_at (updated_at));-- Tabela para tags de ticketsCREATE TABLE ticket_tags (    id INT AUTO_INCREMENT PRIMARY KEY,    ticket_id INT NOT NULL,    tag_id INT NOT NULL,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE,    FOREIGN KEY (tag_id) REFERENCES tags(id) ON DELETE CASCADE,    UNIQUE KEY unique_ticket_tag (ticket_id, tag_id));-- Tabela para comentários de ticketsCREATE TABLE ticket_comments (    id INT AUTO_INCREMENT PRIMARY KEY,    ticket_id INT NOT NULL,    comment TEXT NOT NULL,    created_by INT NOT NULL,    is_internal BOOLEAN DEFAULT FALSE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,    FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE,    FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE);-- Tabela para anexos de ticketsCREATE TABLE ticket_attachments (    id INT AUTO_INCREMENT PRIMARY KEY,    ticket_id INT NOT NULL,    filename VARCHAR(255) NOT NULL,    original_name VARCHAR(255) NOT NULL,    file_path VARCHAR(500) NOT NULL,    file_size INT NOT NULL,    mime_type VARCHAR(100) NOT NULL,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE);-- Tabela para workflowsCREATE TABLE workflows (    id INT AUTO_INCREMENT PRIMARY KEY,    name VARCHAR(100) NOT NULL,    description TEXT,    conditions JSON,    actions JSON,    is_active BOOLEAN DEFAULT TRUE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);-- Tabela para regras de SLACREATE TABLE sla_rules (    id INT AUTO_INCREMENT PRIMARY KEY,    category VARCHAR(100) NOT NULL,    priority VARCHAR(20) NOT NULL,    response_time_hours INT NOT NULL,    resolution_time_hours INT NOT NULL,    is_active BOOLEAN DEFAULT TRUE,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    UNIQUE KEY unique_sla_rule (category, priority));-- Tabela para violações de SLACREATE TABLE sla_violations (    id INT AUTO_INCREMENT PRIMARY KEY,    ticket_id INT NOT NULL,    violation_type ENUM('response', 'resolution') NOT NULL,    hours_elapsed INT NOT NULL,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE);-- Tabela para notificaçõesCREATE TABLE notifications (    id INT AUTO_INCREMENT PRIMARY KEY,    user_id INT NOT NULL,    type VARCHAR(50) NOT NULL,    title VARCHAR(255) NOT NULL,    message TEXT NOT NULL,    ticket_id INT,    priority ENUM('low', 'normal', 'high', 'critical') DEFAULT 'normal',    is_read BOOLEAN DEFAULT FALSE,    read_at TIMESTAMP NULL,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,    FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE);-- Tabela para logs de auditoriaCREATE TABLE audit_logs (    id INT AUTO_INCREMENT PRIMARY KEY,    user_id INT,    action VARCHAR(100) NOT NULL,    resource VARCHAR(100) NOT NULL,    resource_id INT,    details JSON,    ip_address VARCHAR(45),    user_agent TEXT,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL);-- Adicionar foreign keys para usersALTER TABLE users ADD FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE SET NULL;ALTER TABLE users ADD FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE SET NULL;-- Inserir dados iniciaisINSERT INTO roles (name, description) VALUES('Admin', 'Administrador do sistema com acesso total'),('Manager', 'Gerente com acesso a relatórios e gerenciamento'),('Support', 'Agente de suporte com acesso a tickets'),('User', 'Usuário final com acesso limitado');INSERT INTO permissions (name, description) VALUES('admin', 'Acesso total ao sistema'),('manage_users', 'Gerenciar usuários'),('manage_tickets', 'Gerenciar tickets'),('view_reports', 'Visualizar relatórios'),('manage_settings', 'Gerenciar configurações'),('view_tickets', 'Visualizar tickets'),('edit_tickets', 'Editar tickets'),('delete_tickets', 'Deletar tickets'),('manage_notifications', 'Gerenciar notificações');INSERT INTO departments (name, description, color) VALUES('Technical Support', 'Suporte técnico e resolução de problemas', '#3498db'),('Billing', 'Cobrança e questões financeiras', '#e74c3c'),('Sales', 'Vendas e novos clientes', '#2ecc71'),('Development', 'Desenvolvimento e programação', '#9b59b6');INSERT INTO categories (name, description, color, icon) VALUES('Technical Support', 'Problemas técnicos e suporte', '#3498db', 'wrench'),('Billing', 'Problemas de cobrança e pagamento', '#e74c3c', 'credit-card'),('General Inquiry', 'Consultas gerais', '#2ecc71', 'question-circle'),('Bug Report', 'Relatórios de bugs', '#f39c12', 'bug');INSERT INTO tags (name, color, description) VALUES('urgent', '#e74c3c', 'Tickets urgentes que requerem atenção imediata'),('bug', '#f39c12', 'Bugs reportados no sistema'),('feature', '#2ecc71', 'Solicitações de novas funcionalidades'),('documentation', '#3498db', 'Problemas relacionados à documentação');INSERT INTO sla_rules (category, priority, response_time_hours, resolution_time_hours) VALUES('Technical Support', 'low', 24, 72),('Technical Support', 'medium', 12, 48),('Technical Support', 'high', 4, 24),('Technical Support', 'critical', 1, 8),('Billing', 'low', 48, 120),('Billing', 'medium', 24, 72),('Billing', 'high', 12, 48),('Billing', 'critical', 4, 24);-- Criar usuário administrador padrãoINSERT INTO users (name, email, username, password_hash, user_type, role_id) VALUES('Administrador', 'admin@controllit.com.br', 'admin', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'admin', 1);-- Atribuir permissões de adminINSERT INTO user_permissions (user_id, permission_id) VALUES(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9);