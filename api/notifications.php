<?phprequire_once 'config.php';class NotificationService {    private $db;        public function __construct() {        $this->db = new Database();    }        // Configurações de email (em produção, usar variáveis de ambiente)    private function getEmailConfig() {        return [            'smtp_host' => 'smtp.gmail.com', // Configurar conforme seu provedor            'smtp_port' => 587,            'smtp_username' => 'seu-email@controllit.com.br',            'smtp_password' => 'sua-senha-app',            'from_email' => 'suporte@controllit.com.br',            'from_name' => 'Controll IT Help Desk'        ];    }        public function sendTicketCreated($ticketId) {        try {            $conn = $this->db->getConnection();                        // Buscar dados do chamado            $stmt = $conn->prepare("                SELECT t.*, u.name as user_name, u.email as user_email,                       tc.name as category_name, tp.name as priority_name,                       ts.name as status_name                FROM tickets t                LEFT JOIN users u ON t.user_id = u.id                LEFT JOIN ticket_categories tc ON t.category_id = tc.id                LEFT JOIN ticket_priorities tp ON t.priority_id = tp.id                LEFT JOIN ticket_statuses ts ON t.status_id = ts.id                WHERE t.id = ?            ");            $stmt->execute([$ticketId]);            $ticket = $stmt->fetch();                        if (!$ticket) {                return false;            }                        // Buscar agentes de suporte para notificar            $supportStmt = $conn->prepare("                SELECT name, email FROM users                 WHERE user_type IN ('support', 'admin') AND active = 1            ");            $supportStmt->execute();            $supportUsers = $supportStmt->fetchAll();                        // Enviar email para o usuário            $this->sendEmail([                'to' => $ticket['user_email'],                'subject' => 'Chamado #' . $ticket['id'] . ' criado com sucesso',                'template' => 'ticket_created_user',                'data' => $ticket            ]);                        // Enviar email para agentes de suporte            foreach ($supportUsers as $agent) {                $this->sendEmail([                    'to' => $agent['email'],                    'subject' => 'Novo chamado #' . $ticket['id'] . ' - ' . $ticket['title'],                    'template' => 'ticket_created_support',                    'data' => array_merge($ticket, ['agent_name' => $agent['name']])                ]);            }                        return true;                    } catch (Exception $e) {            error_log("Erro ao enviar notificação de chamado criado: " . $e->getMessage());            return false;        }    }        public function sendTicketUpdated($ticketId, $changes) {        try {            $conn = $this->db->getConnection();                        // Buscar dados do chamado            $stmt = $conn->prepare("                SELECT t.*, u.name as user_name, u.email as user_email,                       tc.name as category_name, tp.name as priority_name,                       ts.name as status_name                FROM tickets t                LEFT JOIN users u ON t.user_id = u.id                LEFT JOIN ticket_categories tc ON t.category_id = tc.id                LEFT JOIN ticket_priorities tp ON t.priority_id = tp.id                LEFT JOIN ticket_statuses ts ON t.status_id = ts.id                WHERE t.id = ?            ");            $stmt->execute([$ticketId]);            $ticket = $stmt->fetch();                        if (!$ticket) {                return false;            }                        // Enviar email para o usuário            $this->sendEmail([                'to' => $ticket['user_email'],                'subject' => 'Chamado #' . $ticket['id'] . ' foi atualizado',                'template' => 'ticket_updated',                'data' => array_merge($ticket, ['changes' => $changes])            ]);                        return true;                    } catch (Exception $e) {            error_log("Erro ao enviar notificação de chamado atualizado: " . $e->getMessage());            return false;        }    }        public function sendTicketAssigned($ticketId, $assignedToId) {        try {            $conn = $this->db->getConnection();                        // Buscar dados do chamado e agente            $stmt = $conn->prepare("                SELECT t.*, u.name as user_name, u.email as user_email,                       a.name as assigned_to_name, a.email as assigned_to_email                FROM tickets t                LEFT JOIN users u ON t.user_id = u.id                LEFT JOIN users a ON t.assigned_to = a.id                WHERE t.id = ?            ");            $stmt->execute([$ticketId]);            $ticket = $stmt->fetch();                        if (!$ticket) {                return false;            }                        // Enviar email para o agente atribuído            $this->sendEmail([                'to' => $ticket['assigned_to_email'],                'subject' => 'Chamado #' . $ticket['id'] . ' atribuído a você',                'template' => 'ticket_assigned',                'data' => $ticket            ]);                        return true;                    } catch (Exception $e) {            error_log("Erro ao enviar notificação de chamado atribuído: " . $e->getMessage());            return false;        }    }        private function sendEmail($params) {        $config = $this->getEmailConfig();                // Em produção, usar PHPMailer ou similar        // Aqui implementamos um sistema básico                $to = $params['to'];        $subject = $params['subject'];        $body = $this->getEmailTemplate($params['template'], $params['data']);                $headers = [            'From: ' . $config['from_name'] . ' <' . $config['from_email'] . '>',            'Reply-To: ' . $config['from_email'],            'Content-Type: text/html; charset=UTF-8',            'X-Mailer: Controll IT Help Desk System'        ];                return mail($to, $subject, $body, implode("\r\n", $headers));    }        private function getEmailTemplate($template, $data) {        $templates = [            'ticket_created_user' => '                <html>                <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">                    <div style="max-width: 600px; margin: 0 auto; padding: 20px;">                        <h2 style="color: #1e3a8a;">Chamado Criado com Sucesso</h2>                        <p>Olá ' . htmlspecialchars($data['user_name']) . ',</p>                        <p>Seu chamado foi criado com sucesso:</p>                        <div style="background: #f8fafc; padding: 15px; border-radius: 5px; margin: 20px 0;">                            <p><strong>Número:</strong> #' . $data['id'] . '</p>                            <p><strong>Título:</strong> ' . htmlspecialchars($data['title']) . '</p>                            <p><strong>Categoria:</strong> ' . htmlspecialchars($data['category_name']) . '</p>                            <p><strong>Prioridade:</strong> ' . htmlspecialchars($data['priority_name']) . '</p>                            <p><strong>Status:</strong> ' . htmlspecialchars($data['status_name']) . '</p>                        </div>                        <p>Você receberá atualizações por email conforme o progresso do chamado.</p>                        <p>Atenciosamente,<br>Equipe Controll IT</p>                    </div>                </body>                </html>            ',                        'ticket_created_support' => '                <html>                <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">                    <div style="max-width: 600px; margin: 0 auto; padding: 20px;">                        <h2 style="color: #1e3a8a;">Novo Chamado Recebido</h2>                        <p>Olá ' . htmlspecialchars($data['agent_name']) . ',</p>                        <p>Um novo chamado foi criado:</p>                        <div style="background: #f8fafc; padding: 15px; border-radius: 5px; margin: 20px 0;">                            <p><strong>Número:</strong> #' . $data['id'] . '</p>                            <p><strong>Título:</strong> ' . htmlspecialchars($data['title']) . '</p>                            <p><strong>Usuário:</strong> ' . htmlspecialchars($data['user_name']) . '</p>                            <p><strong>Categoria:</strong> ' . htmlspecialchars($data['category_name']) . '</p>                            <p><strong>Prioridade:</strong> ' . htmlspecialchars($data['priority_name']) . '</p>                            <p><strong>Descrição:</strong><br>' . nl2br(htmlspecialchars($data['description'])) . '</p>                        </div>                        <p>Acesse o sistema para atribuir e iniciar o atendimento.</p>                        <p>Atenciosamente,<br>Sistema Controll IT</p>                    </div>                </body>                </html>            ',                        'ticket_updated' => '                <html>                <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">                    <div style="max-width: 600px; margin: 0 auto; padding: 20px;">                        <h2 style="color: #1e3a8a;">Chamado Atualizado</h2>                        <p>Olá ' . htmlspecialchars($data['user_name']) . ',</p>                        <p>Seu chamado #' . $data['id'] . ' foi atualizado:</p>                        <div style="background: #f8fafc; padding: 15px; border-radius: 5px; margin: 20px 0;">                            <p><strong>Status:</strong> ' . htmlspecialchars($data['status_name']) . '</p>                            <p><strong>Alterações:</strong> ' . htmlspecialchars($data['changes']) . '</p>                        </div>                        <p>Acesse o sistema para ver mais detalhes.</p>                        <p>Atenciosamente,<br>Equipe Controll IT</p>                    </div>                </body>                </html>            ',                        'ticket_assigned' => '                <html>                <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">                    <div style="max-width: 600px; margin: 0 auto; padding: 20px;">                        <h2 style="color: #1e3a8a;">Chamado Atribuído</h2>                        <p>Olá ' . htmlspecialchars($data['assigned_to_name']) . ',</p>                        <p>Um chamado foi atribuído a você:</p>                        <div style="background: #f8fafc; padding: 15px; border-radius: 5px; margin: 20px 0;">                            <p><strong>Número:</strong> #' . $data['id'] . '</p>                            <p><strong>Título:</strong> ' . htmlspecialchars($data['title']) . '</p>                            <p><strong>Usuário:</strong> ' . htmlspecialchars($data['user_name']) . '</p>                            <p><strong>Prioridade:</strong> ' . htmlspecialchars($data['priority_name']) . '</p>                        </div>                        <p>Acesse o sistema para iniciar o atendimento.</p>                        <p>Atenciosamente,<br>Sistema Controll IT</p>                    </div>                </body>                </html>            '        ];                return $templates[$template] ?? 'Template não encontrado';    }}// Função para enviar notificação de chamado criadofunction notifyTicketCreated($ticketId) {    $notification = new NotificationService();    return $notification->sendTicketCreated($ticketId);}// Função para enviar notificação de chamado atualizadofunction notifyTicketUpdated($ticketId, $changes) {    $notification = new NotificationService();    return $notification->sendTicketUpdated($ticketId, $changes);}// Função para enviar notificação de chamado atribuídofunction notifyTicketAssigned($ticketId, $assignedToId) {    $notification = new NotificationService();    return $notification->sendTicketAssigned($ticketId, $assignedToId);}?>