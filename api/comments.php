<?phprequire_once 'config.php';require_once 'auth.php';require_once 'notifications.php';class CommentManager {    private $db;    private $auth;    private $notifications;        public function __construct($db) {        $this->db = $db;        $this->auth = new AuthAPI($db);        $this->notifications = new NotificationManager($db);    }        // Adicionar comentário    public function addComment($ticketId, $comment, $userId, $isInternal = false) {        $stmt = $this->db->prepare("            INSERT INTO ticket_comments (ticket_id, comment, created_by, is_internal, created_at)             VALUES (?, ?, ?, ?, NOW())        ");        $result = $stmt->execute([$ticketId, $comment, $userId, $isInternal ? 1 : 0]);                if ($result) {            $this->notifyCommentAdded($ticketId, $comment, $userId, $isInternal);        }                return $result;    }        // Obter comentários do ticket    public function getTicketComments($ticketId, $includeInternal = false) {        $whereClause = $includeInternal ? "" : "AND is_internal = 0";        $stmt = $this->db->prepare("            SELECT                 tc.*,                u.name as user_name,                u.role as user_role            FROM ticket_comments tc            LEFT JOIN users u ON tc.created_by = u.id            WHERE tc.ticket_id = ? $whereClause            ORDER BY tc.created_at ASC        ");        $stmt->execute([$ticketId]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter comentário por ID    public function getComment($commentId) {        $stmt = $this->db->prepare("            SELECT                 tc.*,                u.name as user_name,                u.role as user_role            FROM ticket_comments tc            LEFT JOIN users u ON tc.created_by = u.id            WHERE tc.id = ?        ");        $stmt->execute([$commentId]);        return $stmt->fetch(PDO::FETCH_ASSOC);    }        // Atualizar comentário    public function updateComment($commentId, $comment, $userId) {        // Verificar se o usuário pode editar o comentário        $stmt = $this->db->prepare("            SELECT created_by FROM ticket_comments WHERE id = ?        ");        $stmt->execute([$commentId]);        $commentData = $stmt->fetch(PDO::FETCH_ASSOC);                if (!$commentData || $commentData['created_by'] != $userId) {            return false; // Não pode editar comentário de outro usuário        }                $stmt = $this->db->prepare("            UPDATE ticket_comments             SET comment = ?, updated_at = NOW()             WHERE id = ?        ");        return $stmt->execute([$comment, $commentId]);    }        // Deletar comentário    public function deleteComment($commentId, $userId) {        // Verificar se o usuário pode deletar o comentário        $stmt = $this->db->prepare("            SELECT created_by FROM ticket_comments WHERE id = ?        ");        $stmt->execute([$commentId]);        $commentData = $stmt->fetch(PDO::FETCH_ASSOC);                if (!$commentData || $commentData['created_by'] != $userId) {            return false; // Não pode deletar comentário de outro usuário        }                $stmt = $this->db->prepare("DELETE FROM ticket_comments WHERE id = ?");        return $stmt->execute([$commentId]);    }        // Obter comentários por usuário    public function getUserComments($userId, $limit = 50) {        $stmt = $this->db->prepare("            SELECT                 tc.*,                t.title as ticket_title,                t.status as ticket_status            FROM ticket_comments tc            JOIN tickets t ON tc.ticket_id = t.id            WHERE tc.created_by = ?            ORDER BY tc.created_at DESC            LIMIT ?        ");        $stmt->execute([$userId, $limit]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter comentários recentes    public function getRecentComments($limit = 20) {        $stmt = $this->db->prepare("            SELECT                 tc.*,                u.name as user_name,                t.title as ticket_title            FROM ticket_comments tc            LEFT JOIN users u ON tc.created_by = u.id            JOIN tickets t ON tc.ticket_id = t.id            WHERE tc.is_internal = 0            ORDER BY tc.created_at DESC            LIMIT ?        ");        $stmt->execute([$limit]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter estatísticas de comentários    public function getCommentStatistics($startDate = null, $endDate = null) {        $whereClause = "";        $params = [];                if ($startDate && $endDate) {            $whereClause = "WHERE tc.created_at BETWEEN ? AND ?";            $params = [$startDate, $endDate];        }                $stmt = $this->db->prepare("            SELECT                 COUNT(tc.id) as total_comments,                COUNT(CASE WHEN tc.is_internal = 1 THEN 1 END) as internal_comments,                COUNT(CASE WHEN tc.is_internal = 0 THEN 1 END) as public_comments,                AVG(LENGTH(tc.comment)) as avg_comment_length            FROM ticket_comments tc            $whereClause        ");        $stmt->execute($params);        return $stmt->fetch(PDO::FETCH_ASSOC);    }        // Notificar comentário adicionado    private function notifyCommentAdded($ticketId, $comment, $userId, $isInternal) {        $ticket = $this->getTicket($ticketId);        if (!$ticket) return;                $user = $this->getUser($userId);        if (!$user) return;                $subject = "Novo comentário no ticket #{$ticketId}";        $message = "Um novo comentário foi adicionado ao ticket #{$ticketId}:\n\n";        $message .= "Comentário: {$comment}\n";        $message .= "Por: {$user['name']}\n";        $message .= "Data: " . date('d/m/Y H:i:s');                // Notificar o criador do ticket se não for ele        if ($ticket['created_by'] != $userId) {            $this->notifications->sendEmail(                $ticket['email'],                $subject,                $message            );        }                // Notificar o usuário atribuído se não for ele        if ($ticket['assigned_to'] && $ticket['assigned_to'] != $userId) {            $assignedUser = $this->getUser($ticket['assigned_to']);            if ($assignedUser) {                $this->notifications->sendEmail(                    $assignedUser['email'],                    $subject,                    $message                );            }        }    }        // Obter ticket    private function getTicket($ticketId) {        $stmt = $this->db->prepare("SELECT * FROM tickets WHERE id = ?");        $stmt->execute([$ticketId]);        return $stmt->fetch(PDO::FETCH_ASSOC);    }        // Obter usuário    private function getUser($userId) {        $stmt = $this->db->prepare("SELECT * FROM users WHERE id = ?");        $stmt->execute([$userId]);        return $stmt->fetch(PDO::FETCH_ASSOC);    }}?>