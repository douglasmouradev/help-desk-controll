<?phprequire_once 'config.php';class PermissionManager {    private $db;        public function __construct($db) {        $this->db = $db;    }        // Verificar se usuário tem permissão específica    public function hasPermission($userId, $permission) {        $stmt = $this->db->prepare("            SELECT COUNT(*) as count             FROM user_permissions up            JOIN permissions p ON up.permission_id = p.id            WHERE up.user_id = ? AND p.name = ?        ");        $stmt->execute([$userId, $permission]);        $result = $stmt->fetch(PDO::FETCH_ASSOC);        return $result['count'] > 0;    }        // Verificar se usuário pode acessar ticket específico    public function canAccessTicket($userId, $ticketId) {        // Admin pode acessar todos        if ($this->hasPermission($userId, 'admin')) {            return true;        }                // Verificar se é o criador do ticket        $stmt = $this->db->prepare("            SELECT created_by FROM tickets WHERE id = ?        ");        $stmt->execute([$ticketId]);        $ticket = $stmt->fetch(PDO::FETCH_ASSOC);                if ($ticket && $ticket['created_by'] == $userId) {            return true;        }                // Verificar se está atribuído ao usuário        $stmt = $this->db->prepare("            SELECT assigned_to FROM tickets WHERE id = ?        ");        $stmt->execute([$ticketId]);        $ticket = $stmt->fetch(PDO::FETCH_ASSOC);                return $ticket && $ticket['assigned_to'] == $userId;    }        // Verificar se usuário pode editar ticket    public function canEditTicket($userId, $ticketId) {        if ($this->hasPermission($userId, 'admin')) {            return true;        }                if ($this->hasPermission($userId, 'edit_tickets')) {            return $this->canAccessTicket($userId, $ticketId);        }                return false;    }        // Verificar se usuário pode deletar ticket    public function canDeleteTicket($userId, $ticketId) {        return $this->hasPermission($userId, 'admin') ||                $this->hasPermission($userId, 'delete_tickets');    }        // Verificar se usuário pode gerenciar usuários    public function canManageUsers($userId) {        return $this->hasPermission($userId, 'admin') ||                $this->hasPermission($userId, 'manage_users');    }        // Verificar se usuário pode ver relatórios    public function canViewReports($userId) {        return $this->hasPermission($userId, 'admin') ||                $this->hasPermission($userId, 'view_reports');    }        // Verificar se usuário pode gerenciar configurações    public function canManageSettings($userId) {        return $this->hasPermission($userId, 'admin');    }        // Obter permissões do usuário    public function getUserPermissions($userId) {        $stmt = $this->db->prepare("            SELECT p.name, p.description            FROM user_permissions up            JOIN permissions p ON up.permission_id = p.id            WHERE up.user_id = ?        ");        $stmt->execute([$userId]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Adicionar permissão ao usuário    public function addUserPermission($userId, $permissionId) {        $stmt = $this->db->prepare("            INSERT INTO user_permissions (user_id, permission_id)             VALUES (?, ?)        ");        return $stmt->execute([$userId, $permissionId]);    }        // Remover permissão do usuário    public function removeUserPermission($userId, $permissionId) {        $stmt = $this->db->prepare("            DELETE FROM user_permissions             WHERE user_id = ? AND permission_id = ?        ");        return $stmt->execute([$userId, $permissionId]);    }        // Criar nova permissão    public function createPermission($name, $description) {        $stmt = $this->db->prepare("            INSERT INTO permissions (name, description)             VALUES (?, ?)        ");        return $stmt->execute([$name, $description]);    }        // Obter todas as permissões    public function getAllPermissions() {        $stmt = $this->db->prepare("SELECT * FROM permissions ORDER BY name");        $stmt->execute();        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Verificar se usuário pode acessar funcionalidade específica    public function canAccessFeature($userId, $feature) {        $featurePermissions = [            'tickets' => ['view_tickets', 'admin'],            'users' => ['manage_users', 'admin'],            'reports' => ['view_reports', 'admin'],            'settings' => ['admin'],            'notifications' => ['manage_notifications', 'admin']        ];                if (!isset($featurePermissions[$feature])) {            return false;        }                foreach ($featurePermissions[$feature] as $permission) {            if ($this->hasPermission($userId, $permission)) {                return true;            }        }                return false;    }}?>