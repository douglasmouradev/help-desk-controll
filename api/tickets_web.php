<?php// Versão da API para web (sem headers quando executado via CLI)if (php_sapi_name() !== 'cli') {    // Só enviar headers quando executado via web    header('Access-Control-Allow-Origin: *');    header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');    header('Access-Control-Allow-Headers: Content-Type, Authorization');    header('Content-Type: application/json; charset=utf-8');        // Tratar requisições OPTIONS (preflight)    if (isset($_SERVER['REQUEST_METHOD']) && $_SERVER['REQUEST_METHOD'] === 'OPTIONS') {        http_response_code(200);        exit();    }}require_once 'config.php';class TicketsController {    private $db;        public function __construct() {        $this->db = new Database();    }        public function index() {        try {            $conn = $this->db->getConnection();                        $query = "                SELECT                     t.id, t.title, t.description, t.priority, t.created_at, t.updated_at,                    u.name as user_name, u.email as user_email,                    tc.name as category,                    ts.name as status, ts.slug as status_slug                FROM tickets t                LEFT JOIN users u ON t.user_id = u.id                LEFT JOIN ticket_categories tc ON t.category_id = tc.id                LEFT JOIN ticket_statuses ts ON t.status_id = ts.id                ORDER BY t.created_at DESC            ";                        $stmt = $conn->prepare($query);            $stmt->execute();            $tickets = $stmt->fetchAll();                        ApiResponse::success($tickets, 'Tickets carregados com sucesso');                    } catch (Exception $e) {            ApiResponse::error('Erro interno do servidor', 500);        }    }        public function show($id) {        try {            $conn = $this->db->getConnection();                        $query = "                SELECT                     t.id, t.title, t.description, t.priority, t.created_at, t.updated_at, t.resolved_at,                    u.name as user_name, u.email as user_email,                    at.name as assigned_to_name, at.email as assigned_to_email,                    tc.name as category,                    ts.name as status, ts.slug as status_slug                FROM tickets t                LEFT JOIN users u ON t.user_id = u.id                LEFT JOIN users at ON t.assigned_to = at.id                LEFT JOIN ticket_categories tc ON t.category_id = tc.id                LEFT JOIN ticket_statuses ts ON t.status_id = ts.id                WHERE t.id = ?            ";                        $stmt = $conn->prepare($query);            $stmt->execute([$id]);            $ticket = $stmt->fetch();                        if (!$ticket) {                ApiResponse::notFound('Chamado não encontrado');            }                        ApiResponse::success($ticket, 'Chamado carregado com sucesso');                    } catch (Exception $e) {            ApiResponse::error('Erro interno do servidor', 500);        }    }}// Roteamento$controller = new TicketsController();$method = $_SERVER['REQUEST_METHOD'] ?? 'GET';$path = $_GET['path'] ?? '';// Extrair ID da URL se presente$id = null;if (preg_match('/\/(\d+)/', $path, $matches)) {    $id = $matches[1];}// Roteamento baseado no método HTTPswitch ($method) {    case 'GET':        if ($id) {            $controller->show($id);        } else {            $controller->index();        }        break;    default:        ApiResponse::error('Método não permitido', 405);        break;}?>