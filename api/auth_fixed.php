<?phprequire_once 'config.php';class AuthController {    private $db;        public function __construct() {        $this->db = new Database();    }        public function login() {        if ($_SERVER['REQUEST_METHOD'] !== 'POST') {            ApiResponse::error('Método não permitido', 405);        }                // Aceitar tanto JSON quanto POST        $input = [];        if (!empty($_POST)) {            $input = $_POST;        } else {            $json = file_get_contents('php://input');            if (!empty($json)) {                $input = json_decode($json, true);            }        }                // Validar dados obrigatórios        $missing = Validator::validateRequired(['username', 'password'], $input);        if (!empty($missing)) {            ApiResponse::error('Campos obrigatórios: ' . implode(', ', $missing), 400);        }                $username = Validator::sanitizeInput($input['username']);        $password = $input['password'];                try {            $conn = $this->db->getConnection();            $stmt = $conn->prepare("                SELECT id, name, email, username, password, type, is_active                 FROM users                 WHERE (username = ? OR email = ?) AND is_active = 1            ");            $stmt->execute([$username, $username]);            $user = $stmt->fetch();                        if (!$user || !verifyPassword($password, $user['password'])) {                logActivity(null, 'LOGIN_FAILED', $username, false);                ApiResponse::error('Usuário ou senha incorretos', 401);            }                        // Gerar token JWT            $payload = [                'user_id' => $user['id'],                'username' => $user['username'],                'type' => $user['type'],                'exp' => time() + JWT_EXPIRY            ];                        $token = JWT::encode($payload);                        // Log de sucesso            logActivity($user['id'], 'LOGIN_SUCCESS', null, true);                        ApiResponse::success([                'token' => $token,                'user' => [                    'id' => $user['id'],                    'username' => $user['username'],                    'name' => $user['name'],                    'email' => $user['email'],                    'type' => $user['type']                ]            ], 'Login realizado com sucesso');                    } catch (Exception $e) {            logActivity(null, 'LOGIN_ERROR', $username, false);            ApiResponse::error('Erro interno do servidor', 500, $e->getMessage());        }    }        public function logout() {        $user = requireAuth();        logActivity($user['user_id'], 'LOGOUT', null, true);        ApiResponse::success(null, 'Logout realizado com sucesso');    }        public function profile() {        $user = requireAuth();        ApiResponse::success($user, 'Perfil do usuário');    }        public function changePassword() {        $user = requireAuth();                if ($_SERVER['REQUEST_METHOD'] !== 'POST') {            ApiResponse::error('Método não permitido', 405);        }                $input = json_decode(file_get_contents('php://input'), true);                $missing = Validator::validateRequired(['current_password', 'new_password'], $input);        if (!empty($missing)) {            ApiResponse::error('Campos obrigatórios: ' . implode(', ', $missing), 400);        }                try {            $conn = $this->db->getConnection();            $stmt = $conn->prepare("SELECT password FROM users WHERE id = ?");            $stmt->execute([$user['user_id']]);            $userData = $stmt->fetch();                        if (!verifyPassword($input['current_password'], $userData['password'])) {                ApiResponse::error('Senha atual incorreta', 400);            }                        $newHash = hashPassword($input['new_password']);            $updateStmt = $conn->prepare("UPDATE users SET password = ? WHERE id = ?");            $updateStmt->execute([$newHash, $user['user_id']]);                        logActivity($user['user_id'], 'PASSWORD_CHANGE', null, true);            ApiResponse::success(null, 'Senha alterada com sucesso');                    } catch (Exception $e) {            ApiResponse::error('Erro interno do servidor', 500, $e->getMessage());        }    }}// Processar requisiçãotry {    $auth = new AuthController();        // Determinar ação    $action = $_POST['action'] ?? $_GET['action'] ?? null;        if (!$action) {        ApiResponse::error('Ação não especificada', 400);    }        switch ($action) {        case 'login':            $auth->login();            break;        case 'logout':            $auth->logout();            break;        case 'profile':            $auth->profile();            break;        case 'change_password':            $auth->changePassword();            break;        default:            ApiResponse::error('Ação não encontrada', 404);    }    } catch (Exception $e) {    ApiResponse::error('Erro interno do servidor', 500, $e->getMessage());}?>