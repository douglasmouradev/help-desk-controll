<?phprequire_once 'config.php';class UsersController {    private $db;        public function __construct() {        $this->db = new Database();    }        public function index() {        requirePermission('admin');                $page = (int)($_GET['page'] ?? 1);        $limit = (int)($_GET['limit'] ?? 20);        $offset = ($page - 1) * $limit;                $filters = [            'type' => $_GET['type'] ?? '',            'active' => $_GET['active'] ?? ''        ];                try {            $conn = $this->db->getConnection();                        $whereConditions = [];            $params = [];                        if ($filters['type']) {                $whereConditions[] = "user_type = ?";                $params[] = $filters['type'];            }                        if ($filters['active'] !== '') {                $whereConditions[] = "active = ?";                $params[] = (int)$filters['active'];            }                        $whereClause = !empty($whereConditions) ? 'WHERE ' . implode(' AND ', $whereConditions) : '';                        // Query principal            $query = "                SELECT                     u.id, u.name, u.email, u.username, u.user_type, u.active,                     u.created_at, u.updated_at,                    COUNT(t.id) as total_tickets,                    COUNT(CASE WHEN ts.slug = 'aberto' THEN 1 END) as open_tickets,                    COUNT(CASE WHEN ts.slug = 'em_andamento' THEN 1 END) as in_progress_tickets,                    COUNT(CASE WHEN ts.is_final = 1 THEN 1 END) as closed_tickets                FROM users u                LEFT JOIN tickets t ON u.id = t.user_id                LEFT JOIN ticket_statuses ts ON t.status_id = ts.id                {$whereClause}                GROUP BY u.id                ORDER BY u.created_at DESC                LIMIT ? OFFSET ?            ";                        $params[] = $limit;            $params[] = $offset;                        $stmt = $conn->prepare($query);            $stmt->execute($params);            $users = $stmt->fetchAll();                        // Contar total para paginação            $countQuery = "                SELECT COUNT(*) as total                FROM users u                {$whereClause}            ";                        $countParams = array_slice($params, 0, -2);            $countStmt = $conn->prepare($countQuery);            $countStmt->execute($countParams);            $total = $countStmt->fetch()['total'];                        $result = [                'users' => $users,                'pagination' => [                    'page' => $page,                    'limit' => $limit,                    'total' => (int)$total,                    'pages' => ceil($total / $limit)                ]            ];                        ApiResponse::success($result, 'Usuários carregados com sucesso');                    } catch (Exception $e) {            ApiResponse::error('Erro interno do servidor', 500);        }    }        public function show($id) {        $user = requireAuth();                // Usuários só podem ver seu próprio perfil, admins podem ver todos        if ($user['type'] !== 'admin' && $user['user_id'] != $id) {            ApiResponse::forbidden('Acesso negado');        }                try {            $conn = $this->db->getConnection();                        $stmt = $conn->prepare("                SELECT                     u.id, u.name, u.email, u.username, u.user_type, u.active,                     u.created_at, u.updated_at,                    COUNT(t.id) as total_tickets,                    COUNT(CASE WHEN ts.slug = 'aberto' THEN 1 END) as open_tickets,                    COUNT(CASE WHEN ts.slug = 'em_andamento' THEN 1 END) as in_progress_tickets,                    COUNT(CASE WHEN ts.is_final = 1 THEN 1 END) as closed_tickets                FROM users u                LEFT JOIN tickets t ON u.id = t.user_id                LEFT JOIN ticket_statuses ts ON t.status_id = ts.id                WHERE u.id = ?                GROUP BY u.id            ");            $stmt->execute([$id]);            $userData = $stmt->fetch();                        if (!$userData) {                ApiResponse::notFound('Usuário não encontrado');            }                        ApiResponse::success($userData, 'Usuário carregado com sucesso');                    } catch (Exception $e) {            ApiResponse::error('Erro interno do servidor', 500);        }    }        public function create() {        requirePermission('admin');                if ($_SERVER['REQUEST_METHOD'] !== 'POST') {            ApiResponse::error('Método não permitido', 405);        }                $input = json_decode(file_get_contents('php://input'), true);                $missing = Validator::validateRequired(['name', 'email', 'password', 'user_type'], $input);        if (!empty($missing)) {            ApiResponse::error('Campos obrigatórios: ' . implode(', ', $missing), 400);        }                // Validar email        if (!Validator::validateEmail($input['email'])) {            ApiResponse::error('E-mail inválido', 400);        }                // Validar senha        if (!Validator::validatePassword($input['password'])) {            ApiResponse::error('Senha deve ter pelo menos 6 caracteres', 400);        }                // Validar tipo de usuário        if (!in_array($input['user_type'], ['user', 'support', 'admin'])) {            ApiResponse::error('Tipo de usuário inválido', 400);        }                try {            $conn = $this->db->getConnection();                        // Verificar se email já existe            $emailStmt = $conn->prepare("SELECT id FROM users WHERE email = ?");            $emailStmt->execute([$input['email']]);            if ($emailStmt->fetch()) {                ApiResponse::error('E-mail já cadastrado', 400);            }                        // Gerar username único            $username = explode('@', $input['email'])[0];            $originalUsername = $username;            $counter = 1;                        while (true) {                $usernameStmt = $conn->prepare("SELECT id FROM users WHERE username = ?");                $usernameStmt->execute([$username]);                if (!$usernameStmt->fetch()) {                    break;                }                $username = $originalUsername . $counter;                $counter++;            }                        // Criar usuário            $passwordHash = password_hash($input['password'], PASSWORD_DEFAULT);                        $stmt = $conn->prepare("                INSERT INTO users (name, email, username, password_hash, user_type)                 VALUES (?, ?, ?, ?, ?)            ");                        $stmt->execute([                Validator::sanitizeInput($input['name']),                $input['email'],                $username,                $passwordHash,                $input['user_type']            ]);                        $userId = $conn->lastInsertId();                        logActivity($_SESSION['user_id'] ?? null, 'USER_CREATED', $userId, true);                        // Retornar o usuário criado            $this->show($userId);                    } catch (Exception $e) {            ApiResponse::error('Erro ao criar usuário', 500);        }    }        public function update($id) {        $user = requireAuth();                if ($_SERVER['REQUEST_METHOD'] !== 'PUT') {            ApiResponse::error('Método não permitido', 405);        }                // Verificar permissões        if ($user['type'] !== 'admin' && $user['user_id'] != $id) {            ApiResponse::forbidden('Acesso negado');        }                $input = json_decode(file_get_contents('php://input'), true);                try {            $conn = $this->db->getConnection();                        // Verificar se o usuário existe            $stmt = $conn->prepare("SELECT * FROM users WHERE id = ?");            $stmt->execute([$id]);            $userData = $stmt->fetch();                        if (!$userData) {                ApiResponse::notFound('Usuário não encontrado');            }                        $updates = [];            $params = [];                        // Campos que podem ser atualizados            $allowedFields = ['name', 'email', 'user_type', 'active'];                        // Apenas admins podem alterar tipo e status ativo            if ($user['type'] !== 'admin') {                $allowedFields = array_diff($allowedFields, ['user_type', 'active']);            }                        foreach ($allowedFields as $field) {                if (isset($input[$field])) {                    $updates[] = "{$field} = ?";                    $params[] = $input[$field];                }            }                        // Atualizar senha se fornecida            if (isset($input['password']) && !empty($input['password'])) {                if (!Validator::validatePassword($input['password'])) {                    ApiResponse::error('Senha deve ter pelo menos 6 caracteres', 400);                }                                $updates[] = "password_hash = ?";                $params[] = password_hash($input['password'], PASSWORD_DEFAULT);            }                        if (!empty($updates)) {                $params[] = $id;                $updateQuery = "UPDATE users SET " . implode(', ', $updates) . ", updated_at = CURRENT_TIMESTAMP WHERE id = ?";                                $updateStmt = $conn->prepare($updateQuery);                $updateStmt->execute($params);                                logActivity($user['user_id'], 'USER_UPDATED', $id, true);            }                        // Retornar o usuário atualizado            $this->show($id);                    } catch (Exception $e) {            ApiResponse::error('Erro ao atualizar usuário', 500);        }    }        public function delete($id) {        requirePermission('admin');                if ($_SERVER['REQUEST_METHOD'] !== 'DELETE') {            ApiResponse::error('Método não permitido', 405);        }                try {            $conn = $this->db->getConnection();                        // Verificar se o usuário existe            $stmt = $conn->prepare("SELECT id FROM users WHERE id = ?");            $stmt->execute([$id]);                        if (!$stmt->fetch()) {                ApiResponse::notFound('Usuário não encontrado');            }                        // Verificar se é o próprio usuário logado            if ($id == $_SESSION['user_id']) {                ApiResponse::error('Não é possível excluir sua própria conta', 400);            }                        // Verificar se tem chamados associados            $ticketsStmt = $conn->prepare("SELECT COUNT(*) as count FROM tickets WHERE user_id = ?");            $ticketsStmt->execute([$id]);            $ticketsCount = $ticketsStmt->fetch()['count'];                        if ($ticketsCount > 0) {                ApiResponse::error('Não é possível excluir usuário com chamados associados', 400);            }                        // Deletar usuário            $deleteStmt = $conn->prepare("DELETE FROM users WHERE id = ?");            $deleteStmt->execute([$id]);                        logActivity($_SESSION['user_id'] ?? null, 'USER_DELETED', $id, true);                        ApiResponse::success(null, 'Usuário excluído com sucesso');                    } catch (Exception $e) {            ApiResponse::error('Erro ao excluir usuário', 500);        }    }        public function toggleStatus($id) {        requirePermission('admin');                if ($_SERVER['REQUEST_METHOD'] !== 'POST') {            ApiResponse::error('Método não permitido', 405);        }                try {            $conn = $this->db->getConnection();                        // Verificar se o usuário existe            $stmt = $conn->prepare("SELECT id, active FROM users WHERE id = ?");            $stmt->execute([$id]);            $userData = $stmt->fetch();                        if (!$userData) {                ApiResponse::notFound('Usuário não encontrado');            }                        // Verificar se é o próprio usuário logado            if ($id == $_SESSION['user_id']) {                ApiResponse::error('Não é possível alterar status da sua própria conta', 400);            }                        // Alternar status            $newStatus = $userData['active'] ? 0 : 1;                        $updateStmt = $conn->prepare("UPDATE users SET active = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?");            $updateStmt->execute([$newStatus, $id]);                        $action = $newStatus ? 'USER_ACTIVATED' : 'USER_DEACTIVATED';            logActivity($_SESSION['user_id'] ?? null, $action, $id, true);                        $message = $newStatus ? 'Usuário ativado com sucesso' : 'Usuário desativado com sucesso';            ApiResponse::success(['active' => $newStatus], $message);                    } catch (Exception $e) {            ApiResponse::error('Erro ao alterar status do usuário', 500);        }    }        public function getSupportAgents() {        requirePermission('admin');                try {            $conn = $this->db->getConnection();                        $stmt = $conn->prepare("                SELECT                     u.id, u.name, u.email,                    COUNT(t.id) as assigned_tickets,                    COUNT(CASE WHEN ts.slug = 'em_andamento' THEN 1 END) as in_progress_tickets,                    COUNT(CASE WHEN ts.is_final = 1 THEN 1 END) as closed_tickets                FROM users u                LEFT JOIN tickets t ON u.id = t.assigned_to                LEFT JOIN ticket_statuses ts ON t.status_id = ts.id                WHERE u.user_type = 'support' AND u.active = 1                GROUP BY u.id                ORDER BY u.name            ");            $stmt->execute();            $agents = $stmt->fetchAll();                        ApiResponse::success($agents, 'Agentes de suporte carregados com sucesso');                    } catch (Exception $e) {            ApiResponse::error('Erro interno do servidor', 500);        }    }        public function getStats() {        requirePermission('admin');                try {            $conn = $this->db->getConnection();                        $stmt = $conn->prepare("                SELECT                     COUNT(*) as total_users,                    COUNT(CASE WHEN user_type = 'user' THEN 1 END) as regular_users,                    COUNT(CASE WHEN user_type = 'support' THEN 1 END) as support_users,                    COUNT(CASE WHEN user_type = 'admin' THEN 1 END) as admin_users,                    COUNT(CASE WHEN active = 1 THEN 1 END) as active_users,                    COUNT(CASE WHEN active = 0 THEN 1 END) as inactive_users                FROM users            ");            $stmt->execute();            $stats = $stmt->fetch();                        ApiResponse::success($stats, 'Estatísticas de usuários carregadas com sucesso');                    } catch (Exception $e) {            ApiResponse::error('Erro interno do servidor', 500);        }    }}// Roteamento$controller = new UsersController();$method = $_SERVER['REQUEST_METHOD'];$path = $_GET['path'] ?? '';// Extrair ID da URL se presente$id = null;if (preg_match('/\/(\d+)/', $path, $matches)) {    $id = $matches[1];}switch ($method) {    case 'GET':        if ($id) {            $controller->show($id);        } elseif (strpos($path, 'support-agents') !== false) {            $controller->getSupportAgents();        } elseif (strpos($path, 'stats') !== false) {            $controller->getStats();        } else {            $controller->index();        }        break;    case 'POST':        if ($id && strpos($path, 'toggle-status') !== false) {            $controller->toggleStatus($id);        } else {            $controller->create();        }        break;    case 'PUT':        if ($id) {            $controller->update($id);        } else {            ApiResponse::error('ID do usuário não fornecido', 400);        }        break;    case 'DELETE':        if ($id) {            $controller->delete($id);        } else {            ApiResponse::error('ID do usuário não fornecido', 400);        }        break;    default:        ApiResponse::error('Método não permitido', 405);}?>