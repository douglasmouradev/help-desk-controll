<?phprequire_once 'config.php';class AuthController {    private $db;        public function __construct() {        $this->db = new Database();    }        public function login() {        if ($_SERVER['REQUEST_METHOD'] !== 'POST') {            ApiResponse::error('Método não permitido', 405);        }                $input = json_decode(file_get_contents('php://input'), true);                // Validar dados obrigatórios        $missing = Validator::validateRequired(['username', 'password'], $input);        if (!empty($missing)) {            ApiResponse::error('Campos obrigatórios: ' . implode(', ', $missing), 400);        }                $username = Validator::sanitizeInput($input['username']);        $password = $input['password'];                try {            $conn = $this->db->getConnection();            $stmt = $conn->prepare("                SELECT id, name, email, username, password_hash, user_type, active                 FROM users                 WHERE (username = ? OR email = ?) AND active = 1            ");            $stmt->execute([$username, $username]);            $user = $stmt->fetch();                        if (!$user || !verifyPassword($password, $user['password_hash'])) {                logActivity(null, 'LOGIN_FAILED', $username, false);                ApiResponse::error('Usuário ou senha incorretos', 401);            }                        // Gerar token JWT            $payload = [                'user_id' => $user['id'],                'username' => $user['username'],                'type' => $user['user_type'],                'exp' => time() + JWT_EXPIRY            ];                        $token = JWT::encode($payload);                        logActivity($user['id'], 'LOGIN_SUCCESS', null, true);                        // Remover dados sensíveis            unset($user['password_hash']);                        ApiResponse::success([                'token' => $token,                'user' => $user            ], 'Login realizado com sucesso');                    } catch (Exception $e) {            logActivity(null, 'LOGIN_ERROR', $username, false);            ApiResponse::error('Erro interno do servidor', 500);        }    }        public function logout() {        $user = requireAuth();                logActivity($user['user_id'], 'LOGOUT', null, true);                ApiResponse::success(null, 'Logout realizado com sucesso');    }        public function refresh() {        $user = requireAuth();                // Gerar novo token        $payload = [            'user_id' => $user['user_id'],            'username' => $user['username'],            'type' => $user['type'],            'exp' => time() + JWT_EXPIRY        ];                $token = JWT::encode($payload);                ApiResponse::success(['token' => $token], 'Token renovado com sucesso');    }        public function profile() {        $user = requireAuth();                try {            $conn = $this->db->getConnection();            $stmt = $conn->prepare("                SELECT id, name, email, username, user_type, active, created_at, updated_at                FROM users                 WHERE id = ?            ");            $stmt->execute([$user['user_id']]);            $userData = $stmt->fetch();                        if (!$userData) {                ApiResponse::notFound('Usuário não encontrado');            }                        ApiResponse::success($userData, 'Perfil carregado com sucesso');                    } catch (Exception $e) {            ApiResponse::error('Erro interno do servidor', 500);        }    }        public function changePassword() {        $user = requireAuth();                if ($_SERVER['REQUEST_METHOD'] !== 'POST') {            ApiResponse::error('Método não permitido', 405);        }                $input = json_decode(file_get_contents('php://input'), true);                $missing = Validator::validateRequired(['current_password', 'new_password'], $input);        if (!empty($missing)) {            ApiResponse::error('Campos obrigatórios: ' . implode(', ', $missing), 400);        }                $currentPassword = $input['current_password'];        $newPassword = $input['new_password'];                if (!Validator::validatePassword($newPassword)) {            ApiResponse::error('Nova senha deve ter pelo menos 6 caracteres', 400);        }                try {            $conn = $this->db->getConnection();                        // Verificar senha atual            $stmt = $conn->prepare("SELECT password_hash FROM users WHERE id = ?");            $stmt->execute([$user['user_id']]);            $userData = $stmt->fetch();                        if (!$userData || !verifyPassword($currentPassword, $userData['password_hash'])) {                ApiResponse::error('Senha atual incorreta', 400);            }                        // Atualizar senha            $newPasswordHash = hashPassword($newPassword);            $stmt = $conn->prepare("UPDATE users SET password_hash = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?");            $stmt->execute([$newPasswordHash, $user['user_id']]);                        logActivity($user['user_id'], 'PASSWORD_CHANGED', null, true);                        ApiResponse::success(null, 'Senha alterada com sucesso');                    } catch (Exception $e) {            ApiResponse::error('Erro interno do servidor', 500);        }    }}// Roteamento$controller = new AuthController();$method = $_SERVER['REQUEST_METHOD'];$action = $_GET['action'] ?? '';switch ($action) {    case 'login':        $controller->login();        break;    case 'logout':        $controller->logout();        break;    case 'refresh':        $controller->refresh();        break;    case 'profile':        $controller->profile();        break;    case 'change-password':        $controller->changePassword();        break;    default:        ApiResponse::error('Ação não encontrada', 404);}?>