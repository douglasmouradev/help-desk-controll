<?phprequire_once 'config.php';require_once 'auth.php';class CategoryManager {    private $db;    private $auth;        public function __construct($db) {        $this->db = $db;        $this->auth = new AuthAPI($db);    }        // Criar categoria    public function createCategory($name, $description, $parentId = null, $color = null, $icon = null) {        $stmt = $this->db->prepare("            INSERT INTO categories (name, description, parent_id, color, icon, is_active)             VALUES (?, ?, ?, ?, ?, 1)        ");        return $stmt->execute([$name, $description, $parentId, $color, $icon]);    }        // Obter todas as categorias    public function getAllCategories($includeInactive = false) {        $whereClause = $includeInactive ? "" : "WHERE is_active = 1";        $stmt = $this->db->prepare("            SELECT * FROM categories $whereClause ORDER BY name        ");        $stmt->execute();        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter categoria por ID    public function getCategory($categoryId) {        $stmt = $this->db->prepare("SELECT * FROM categories WHERE id = ?");        $stmt->execute([$categoryId]);        return $stmt->fetch(PDO::FETCH_ASSOC);    }        // Atualizar categoria    public function updateCategory($categoryId, $name, $description, $parentId = null, $color = null, $icon = null) {        $stmt = $this->db->prepare("            UPDATE categories             SET name = ?, description = ?, parent_id = ?, color = ?, icon = ?            WHERE id = ?        ");        return $stmt->execute([$name, $description, $parentId, $color, $icon, $categoryId]);    }        // Deletar categoria    public function deleteCategory($categoryId) {        // Verificar se há tickets usando esta categoria        $stmt = $this->db->prepare("SELECT COUNT(*) as count FROM tickets WHERE category = ?");        $stmt->execute([$categoryId]);        $result = $stmt->fetch(PDO::FETCH_ASSOC);                if ($result['count'] > 0) {            return false; // Não pode deletar categoria com tickets        }                $stmt = $this->db->prepare("DELETE FROM categories WHERE id = ?");        return $stmt->execute([$categoryId]);    }        // Ativar/desativar categoria    public function toggleCategory($categoryId, $isActive) {        $stmt = $this->db->prepare("            UPDATE categories SET is_active = ? WHERE id = ?        ");        return $stmt->execute([$isActive ? 1 : 0, $categoryId]);    }        // Obter categorias hierárquicas    public function getHierarchicalCategories() {        $categories = $this->getAllCategories();        $hierarchy = [];                foreach ($categories as $category) {            if ($category['parent_id'] === null) {                $hierarchy[] = $this->buildCategoryTree($category, $categories);            }        }                return $hierarchy;    }        // Construir árvore de categorias    private function buildCategoryTree($category, $allCategories) {        $children = [];        foreach ($allCategories as $cat) {            if ($cat['parent_id'] == $category['id']) {                $children[] = $this->buildCategoryTree($cat, $allCategories);            }        }                $category['children'] = $children;        return $category;    }        // Obter estatísticas de categoria    public function getCategoryStatistics($categoryId, $startDate = null, $endDate = null) {        $whereClause = "WHERE category = ?";        $params = [$categoryId];                if ($startDate && $endDate) {            $whereClause .= " AND created_at BETWEEN ? AND ?";            $params[] = $startDate;            $params[] = $endDate;        }                $stmt = $this->db->prepare("            SELECT                 COUNT(*) as total_tickets,                COUNT(CASE WHEN status = 'open' THEN 1 END) as open_tickets,                COUNT(CASE WHEN status = 'in_progress' THEN 1 END) as in_progress_tickets,                COUNT(CASE WHEN status = 'closed' THEN 1 END) as closed_tickets,                AVG(TIMESTAMPDIFF(HOUR, created_at, updated_at)) as avg_resolution_time            FROM tickets             $whereClause        ");        $stmt->execute($params);        return $stmt->fetch(PDO::FETCH_ASSOC);    }        // Obter subcategorias    public function getSubcategories($parentId) {        $stmt = $this->db->prepare("            SELECT * FROM categories             WHERE parent_id = ? AND is_active = 1             ORDER BY name        ");        $stmt->execute([$parentId]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter categoria raiz    public function getRootCategories() {        $stmt = $this->db->prepare("            SELECT * FROM categories             WHERE parent_id IS NULL AND is_active = 1             ORDER BY name        ");        $stmt->execute();        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Buscar categorias    public function searchCategories($query) {        $stmt = $this->db->prepare("            SELECT * FROM categories             WHERE (name LIKE ? OR description LIKE ?) AND is_active = 1            ORDER BY name        ");        $searchTerm = "%$query%";        $stmt->execute([$searchTerm, $searchTerm]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter categorias mais usadas    public function getMostUsedCategories($limit = 10) {        $stmt = $this->db->prepare("            SELECT                 c.*,                COUNT(t.id) as ticket_count            FROM categories c            LEFT JOIN tickets t ON c.id = t.category            WHERE c.is_active = 1            GROUP BY c.id            ORDER BY ticket_count DESC            LIMIT ?        ");        $stmt->execute([$limit]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Criar categorias padrão    public function createDefaultCategories() {        $defaultCategories = [            ['Technical Support', 'Problemas técnicos e suporte', null, '#3498db', 'wrench'],            ['Billing', 'Problemas de cobrança e pagamento', null, '#e74c3c', 'credit-card'],            ['General Inquiry', 'Consultas gerais', null, '#2ecc71', 'question-circle'],            ['Bug Report', 'Relatórios de bugs', null, '#f39c12', 'bug'],            ['Feature Request', 'Solicitações de funcionalidades', null, '#9b59b6', 'lightbulb'],            ['Account Issues', 'Problemas de conta', null, '#34495e', 'user'],            ['Hardware', 'Problemas de hardware', 1, '#e67e22', 'desktop'],            ['Software', 'Problemas de software', 1, '#16a085', 'laptop'],            ['Network', 'Problemas de rede', 1, '#27ae60', 'wifi'],            ['Payment', 'Problemas de pagamento', 2, '#c0392b', 'money'],            ['Invoice', 'Problemas de fatura', 2, '#8e44ad', 'file-text'],            ['Refund', 'Solicitações de reembolso', 2, '#f1c40f', 'undo']        ];                foreach ($defaultCategories as $category) {            $this->createCategory(                $category[0],                 $category[1],                 $category[2],                 $category[3],                 $category[4]            );        }                return true;    }        // Obter categorias com contadores    public function getCategoriesWithCounts() {        $stmt = $this->db->prepare("            SELECT                 c.*,                COUNT(t.id) as total_tickets,                COUNT(CASE WHEN t.status = 'open' THEN 1 END) as open_tickets,                COUNT(CASE WHEN t.status = 'in_progress' THEN 1 END) as in_progress_tickets,                COUNT(CASE WHEN t.status = 'closed' THEN 1 END) as closed_tickets            FROM categories c            LEFT JOIN tickets t ON c.id = t.category            WHERE c.is_active = 1            GROUP BY c.id            ORDER BY total_tickets DESC        ");        $stmt->execute();        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter categoria por nome    public function getCategoryByName($name) {        $stmt = $this->db->prepare("SELECT * FROM categories WHERE name = ? AND is_active = 1");        $stmt->execute([$name]);        return $stmt->fetch(PDO::FETCH_ASSOC);    }        // Obter categorias por prioridade    public function getCategoriesByPriority() {        $stmt = $this->db->prepare("            SELECT                 c.*,                AVG(CASE WHEN t.priority = 'high' THEN 1 ELSE 0 END) as high_priority_ratio,                AVG(CASE WHEN t.priority = 'critical' THEN 1 ELSE 0 END) as critical_priority_ratio            FROM categories c            LEFT JOIN tickets t ON c.id = t.category            WHERE c.is_active = 1            GROUP BY c.id            ORDER BY high_priority_ratio DESC, critical_priority_ratio DESC        ");        $stmt->execute();        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }}?>