<?php// API de Tickets para Vercelrequire_once 'config-vercel.php';class TicketsController {    private $db;        public function __construct() {        $this->db = new Database();    }        public function list() {        $user = requireAuth();                try {            $conn = $this->db->getConnection();                        // Construir query baseada no tipo de usuário            $query = "                SELECT t.*, u.name as user_name,                        a.name as assigned_to_name,                       c.name as category_name                FROM tickets t                LEFT JOIN users u ON t.user_id = u.id                LEFT JOIN users a ON t.assigned_to = a.id                LEFT JOIN categories c ON t.category = c.name            ";                        $whereConditions = [];            $params = [];                        // Filtrar por usuário se não for admin            if ($user['type'] === 'user') {                $whereConditions[] = "t.user_id = ?";                $params[] = $user['user_id'];            } elseif ($user['type'] === 'support') {                $whereConditions[] = "(t.user_id = ? OR t.assigned_to = ? OR t.assigned_to IS NULL)";                $params[] = $user['user_id'];                $params[] = $user['user_id'];            }                        // Aplicar filtros            if (!empty($whereConditions)) {                $query .= " WHERE " . implode(' AND ', $whereConditions);            }                        $query .= " ORDER BY t.created_at DESC";                        $stmt = $conn->prepare($query);            $stmt->execute($params);            $tickets = $stmt->fetchAll();                        ApiResponse::success($tickets, 'Tickets carregados com sucesso');                    } catch (Exception $e) {            ApiResponse::error('Erro ao carregar tickets: ' . $e->getMessage(), 500);        }    }        public function create() {        $user = requireAuth();                if ($_SERVER['REQUEST_METHOD'] !== 'POST') {            ApiResponse::error('Método não permitido', 405);        }                $input = json_decode(file_get_contents('php://input'), true);                $missing = Validator::validateRequired(['title', 'description', 'priority', 'category'], $input);        if (!empty($missing)) {            ApiResponse::error('Campos obrigatórios: ' . implode(', ', $missing), 400);        }                $title = Validator::sanitizeInput($input['title']);        $description = Validator::sanitizeInput($input['description']);        $priority = $input['priority'];        $category = $input['category'];                try {            $conn = $this->db->getConnection();                        $stmt = $conn->prepare("                INSERT INTO tickets (title, description, priority, category, user_id, status)                 VALUES (?, ?, ?, ?, ?, 'open')            ");                        $stmt->execute([$title, $description, $priority, $category, $user['user_id']]);            $ticketId = $conn->lastInsertId();                        logActivity($user['user_id'], 'TICKET_CREATED', $ticketId, true);                        ApiResponse::success(['id' => $ticketId], 'Ticket criado com sucesso');                    } catch (Exception $e) {            ApiResponse::error('Erro ao criar ticket: ' . $e->getMessage(), 500);        }    }        public function update() {        $user = requireAuth();                if ($_SERVER['REQUEST_METHOD'] !== 'PUT') {            ApiResponse::error('Método não permitido', 405);        }                $ticketId = $_GET['id'] ?? null;        if (!$ticketId) {            ApiResponse::error('ID do ticket não fornecido', 400);        }                $input = json_decode(file_get_contents('php://input'), true);                try {            $conn = $this->db->getConnection();                        // Verificar se o ticket existe e se o usuário tem permissão            $stmt = $conn->prepare("                SELECT * FROM tickets                 WHERE id = ? AND (user_id = ? OR ? IN ('support', 'admin'))            ");            $stmt->execute([$ticketId, $user['user_id'], $user['type']]);            $ticket = $stmt->fetch();                        if (!$ticket) {                ApiResponse::notFound('Ticket não encontrado ou sem permissão');            }                        // Construir query de atualização            $updateFields = [];            $params = [];                        if (isset($input['title'])) {                $updateFields[] = "title = ?";                $params[] = Validator::sanitizeInput($input['title']);            }                        if (isset($input['description'])) {                $updateFields[] = "description = ?";                $params[] = Validator::sanitizeInput($input['description']);            }                        if (isset($input['priority'])) {                $updateFields[] = "priority = ?";                $params[] = $input['priority'];            }                        if (isset($input['status']) && in_array($user['type'], ['support', 'admin'])) {                $updateFields[] = "status = ?";                $params[] = $input['status'];                                if ($input['status'] === 'closed') {                    $updateFields[] = "closed_at = CURRENT_TIMESTAMP";                }            }                        if (isset($input['assigned_to']) && $user['type'] === 'admin') {                $updateFields[] = "assigned_to = ?";                $params[] = $input['assigned_to'];            }                        if (empty($updateFields)) {                ApiResponse::error('Nenhum campo para atualizar', 400);            }                        $updateFields[] = "updated_at = CURRENT_TIMESTAMP";            $params[] = $ticketId;                        $query = "UPDATE tickets SET " . implode(', ', $updateFields) . " WHERE id = ?";            $stmt = $conn->prepare($query);            $stmt->execute($params);                        logActivity($user['user_id'], 'TICKET_UPDATED', $ticketId, true);                        ApiResponse::success(null, 'Ticket atualizado com sucesso');                    } catch (Exception $e) {            ApiResponse::error('Erro ao atualizar ticket: ' . $e->getMessage(), 500);        }    }        public function view() {        $user = requireAuth();                $ticketId = $_GET['id'] ?? null;        if (!$ticketId) {            ApiResponse::error('ID do ticket não fornecido', 400);        }                try {            $conn = $this->db->getConnection();                        $stmt = $conn->prepare("                SELECT t.*, u.name as user_name,                        a.name as assigned_to_name,                       c.name as category_name                FROM tickets t                LEFT JOIN users u ON t.user_id = u.id                LEFT JOIN users a ON t.assigned_to = a.id                LEFT JOIN categories c ON t.category = c.name                WHERE t.id = ? AND (t.user_id = ? OR ? IN ('support', 'admin'))            ");                        $stmt->execute([$ticketId, $user['user_id'], $user['type']]);            $ticket = $stmt->fetch();                        if (!$ticket) {                ApiResponse::notFound('Ticket não encontrado ou sem permissão');            }                        ApiResponse::success($ticket, 'Ticket carregado com sucesso');                    } catch (Exception $e) {            ApiResponse::error('Erro ao carregar ticket: ' . $e->getMessage(), 500);        }    }        public function delete() {        $user = requireAuth();                if (!in_array($user['type'], ['admin'])) {            ApiResponse::forbidden('Apenas administradores podem deletar tickets');        }                if ($_SERVER['REQUEST_METHOD'] !== 'DELETE') {            ApiResponse::error('Método não permitido', 405);        }                $ticketId = $_GET['id'] ?? null;        if (!$ticketId) {            ApiResponse::error('ID do ticket não fornecido', 400);        }                try {            $conn = $this->db->getConnection();                        $stmt = $conn->prepare("DELETE FROM tickets WHERE id = ?");            $stmt->execute([$ticketId]);                        if ($stmt->rowCount() === 0) {                ApiResponse::notFound('Ticket não encontrado');            }                        logActivity($user['user_id'], 'TICKET_DELETED', $ticketId, true);                        ApiResponse::success(null, 'Ticket deletado com sucesso');                    } catch (Exception $e) {            ApiResponse::error('Erro ao deletar ticket: ' . $e->getMessage(), 500);        }    }}// Roteamento$controller = new TicketsController();$method = $_SERVER['REQUEST_METHOD'];$action = $_GET['action'] ?? '';switch ($action) {    case 'list':    case '':        $controller->list();        break;    case 'create':        $controller->create();        break;    case 'update':        $controller->update();        break;    case 'view':        $controller->view();        break;    case 'delete':        $controller->delete();        break;    default:        ApiResponse::error('Ação não encontrada', 404);}?>