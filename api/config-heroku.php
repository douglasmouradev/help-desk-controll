<?php// Configuração para Heroku - Sistema Help Desk Controll IT// Este arquivo deve ser copiado para api/config.php no Heroku// Configuração do banco de dados (usar variáveis de ambiente do Heroku)$database_url = $_ENV['DATABASE_URL'] ?? null;if ($database_url) {    // Parse da URL do banco (formato: postgres://user:pass@host:port/dbname)    $url = parse_url($database_url);        define('DB_HOST', $url['host']);    define('DB_NAME', ltrim($url['path'], '/'));    define('DB_USER', $url['user']);    define('DB_PASS', $url['pass']);    define('DB_PORT', $url['port'] ?? 5432);} else {    // Configuração local para desenvolvimento    define('DB_HOST', 'localhost');    define('DB_NAME', 'helpdesk_titanium');    define('DB_USER', 'root');    define('DB_PASS', '');    define('DB_PORT', 3306);}define('DB_CHARSET', 'utf8mb4');// Configurações de segurançadefine('JWT_SECRET', $_ENV['JWT_SECRET'] ?? 'titanium_helpdesk_secret_key_2024_' . bin2hex(random_bytes(16)));define('JWT_EXPIRY', 3600); // 1 horadefine('PASSWORD_HASH_ALGO', PASSWORD_BCRYPT);define('PASSWORD_COST', 12);// Configurações de upload (Heroku suporta uploads temporários)define('UPLOAD_PATH', sys_get_temp_dir() . '/uploads/');define('MAX_FILE_SIZE', 10 * 1024 * 1024); // 10MBdefine('ALLOWED_EXTENSIONS', ['jpg', 'jpeg', 'png', 'gif', 'pdf', 'doc', 'docx', 'xls', 'xlsx', 'txt']);// Configurações do sistemadefine('SYSTEM_NAME', 'Controll IT Help Desk');define('SYSTEM_EMAIL', 'suporte@controllit.com.br');define('SYSTEM_URL', $_ENV['HEROKU_APP_NAME'] ? 'https://' . $_ENV['HEROKU_APP_NAME'] . '.herokuapp.com' : 'https://Controll IT-helpdesk.herokuapp.com');// Configurações de produçãodefine('DEBUG_MODE', $_ENV['DEBUG_MODE'] === 'true');define('SHOW_ERRORS', $_ENV['SHOW_ERRORS'] === 'true');define('LOG_QUERIES', false);// Headers de segurançaheader('X-Content-Type-Options: nosniff');header('X-Frame-Options: DENY');header('X-XSS-Protection: 1; mode=block');header('Referrer-Policy: strict-origin-when-cross-origin');// Headers CORSheader('Access-Control-Allow-Origin: *');header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');header('Access-Control-Allow-Headers: Content-Type, Authorization');header('Content-Type: application/json; charset=utf-8');// Tratar requisições OPTIONS (preflight)if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {    http_response_code(200);    exit();}// Configurações de timezonedate_default_timezone_set('America/Sao_Paulo');// Configurações de sessão (otimizadas para Heroku)ini_set('session.cookie_httponly', 1);ini_set('session.cookie_secure', 1);ini_set('session.use_strict_mode', 1);ini_set('session.cookie_samesite', 'Strict');// Configurações de memória (otimizadas para Heroku)ini_set('memory_limit', '256M');ini_set('max_execution_time', 60);ini_set('max_input_time', 60);// Configurações de erroif (!DEBUG_MODE) {    error_reporting(0);    ini_set('display_errors', 0);    ini_set('log_errors', 1);    ini_set('error_log', sys_get_temp_dir() . '/php_errors.log');}// Classe de conexão com o banco (otimizada para Heroku)class Database {    private $connection;        public function __construct() {        try {            // Usar PostgreSQL no Heroku, MySQL localmente            if (isset($_ENV['DATABASE_URL'])) {                // PostgreSQL para Heroku                $dsn = "pgsql:host=" . DB_HOST . ";port=" . DB_PORT . ";dbname=" . DB_NAME . ";";            } else {                // MySQL para desenvolvimento local                $dsn = "mysql:host=" . DB_HOST . ";port=" . DB_PORT . ";dbname=" . DB_NAME . ";charset=" . DB_CHARSET;            }                        $this->connection = new PDO($dsn, DB_USER, DB_PASS, [                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,                PDO::ATTR_EMULATE_PREPARES => false,                PDO::ATTR_PERSISTENT => false            ]);        } catch (PDOException $e) {            throw new Exception("Erro na conexão com o banco: " . $e->getMessage());        }    }        public function getConnection() {        return $this->connection;    }}// Classe de resposta da APIclass ApiResponse {    public static function success($data = null, $message = 'Sucesso', $code = 200) {        http_response_code($code);        echo json_encode([            'success' => true,            'message' => $message,            'data' => $data,            'timestamp' => date('Y-m-d H:i:s')        ], JSON_UNESCAPED_UNICODE);        exit();    }        public static function error($message = 'Erro', $code = 400, $details = null) {        http_response_code($code);        echo json_encode([            'success' => false,            'message' => $message,            'details' => $details,            'timestamp' => date('Y-m-d H:i:s')        ], JSON_UNESCAPED_UNICODE);        exit();    }        public static function unauthorized($message = 'Não autorizado') {        self::error($message, 401);    }        public static function forbidden($message = 'Acesso negado') {        self::error($message, 403);    }        public static function notFound($message = 'Recurso não encontrado') {        self::error($message, 404);    }}// Classe de autenticação JWTclass JWT {    public static function encode($payload) {        $header = json_encode(['typ' => 'JWT', 'alg' => 'HS256']);        $payload = json_encode($payload);                $headerEncoded = self::base64UrlEncode($header);        $payloadEncoded = self::base64UrlEncode($payload);                $signature = hash_hmac('sha256', $headerEncoded . "." . $payloadEncoded, JWT_SECRET, true);        $signatureEncoded = self::base64UrlEncode($signature);                return $headerEncoded . "." . $payloadEncoded . "." . $signatureEncoded;    }        public static function decode($token) {        $parts = explode('.', $token);        if (count($parts) !== 3) {            return false;        }                list($headerEncoded, $payloadEncoded, $signatureEncoded) = $parts;                $signature = self::base64UrlDecode($signatureEncoded);        $expectedSignature = hash_hmac('sha256', $headerEncoded . "." . $payloadEncoded, JWT_SECRET, true);                if (!hash_equals($signature, $expectedSignature)) {            return false;        }                $payload = json_decode(self::base64UrlDecode($payloadEncoded), true);                // Verificar expiração        if (isset($payload['exp']) && $payload['exp'] < time()) {            return false;        }                return $payload;    }        private static function base64UrlEncode($data) {        return rtrim(strtr(base64_encode($data), '+/', '-_'), '=');    }        private static function base64UrlDecode($data) {        return base64_decode(str_pad(strtr($data, '-_', '+/'), strlen($data) % 4, '=', STR_PAD_RIGHT));    }}// Classe para validação de dadosclass Validator {    public static function validateEmail($email) {        return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;    }        public static function validatePassword($password) {        return strlen($password) >= 6;    }        public static function sanitizeInput($input) {        return htmlspecialchars(trim($input), ENT_QUOTES, 'UTF-8');    }        public static function validateRequired($fields, $data) {        $missing = [];        foreach ($fields as $field) {            if (!isset($data[$field]) || empty(trim($data[$field]))) {                $missing[] = $field;            }        }        return $missing;    }}// Função para obter o token de autorizaçãofunction getAuthToken() {    $authHeader = '';        // Tentar getallheaders() primeiro    if (function_exists('getallheaders')) {        $headers = getallheaders();        $authHeader = $headers['Authorization'] ?? $headers['authorization'] ?? '';    }        // Se não encontrou, tentar $_SERVER    if (empty($authHeader)) {        $authHeader = $_SERVER['HTTP_AUTHORIZATION'] ?? '';    }        // Se ainda não encontrou, tentar outras variações    if (empty($authHeader)) {        $authHeader = $_SERVER['REDIRECT_HTTP_AUTHORIZATION'] ?? '';    }        if (preg_match('/Bearer\s(\S+)/', $authHeader, $matches)) {        return $matches[1];    }        return null;}// Função para verificar autenticaçãofunction requireAuth() {    $token = getAuthToken();    if (!$token) {        ApiResponse::unauthorized('Token de acesso não fornecido');    }        $payload = JWT::decode($token);    if (!$payload) {        ApiResponse::unauthorized('Token inválido ou expirado');    }        return $payload;}// Função para verificar permissõesfunction requirePermission($requiredType) {    $user = requireAuth();        $permissions = [        'user' => ['user'],        'support' => ['user', 'support'],        'admin' => ['user', 'support', 'admin']    ];        if (!in_array($user['type'], $permissions[$requiredType] ?? [])) {        ApiResponse::forbidden('Permissão insuficiente');    }        return $user;}// Função para log de atividadesfunction logActivity($userId, $action, $resource = null, $success = true) {    try {        $db = new Database();        $conn = $db->getConnection();                $stmt = $conn->prepare("            INSERT INTO access_logs (user_id, ip_address, user_agent, action, resource, success)             VALUES (?, ?, ?, ?, ?, ?)        ");                $stmt->execute([            $userId,            $_SERVER['REMOTE_ADDR'] ?? 'unknown',            $_SERVER['HTTP_USER_AGENT'] ?? 'unknown',            $action,            $resource,            $success        ]);    } catch (Exception $e) {        // Log silencioso - não deve interromper a operação principal        error_log("Erro no log de atividade: " . $e->getMessage());    }}// Funções de segurança para senhasfunction hashPassword($password) {    return password_hash($password, PASSWORD_HASH_ALGO, ['cost' => PASSWORD_COST]);}function verifyPassword($password, $hash) {    return password_verify($password, $hash);}function generateSecureToken($length = 32) {    return bin2hex(random_bytes($length));}// Função para rate limiting (usando banco de dados)function checkRateLimit($identifier, $maxAttempts = 5, $timeWindow = 300) {    try {        $db = new Database();        $conn = $db->getConnection();                // Limpar tentativas antigas        $stmt = $conn->prepare("            DELETE FROM rate_limits             WHERE identifier = ? AND created_at < DATE_SUB(NOW(), INTERVAL ? SECOND)        ");        $stmt->execute([$identifier, $timeWindow]);                // Contar tentativas atuais        $stmt = $conn->prepare("            SELECT COUNT(*) as count FROM rate_limits             WHERE identifier = ? AND created_at > DATE_SUB(NOW(), INTERVAL ? SECOND)        ");        $stmt->execute([$identifier, $timeWindow]);        $result = $stmt->fetch();                if ($result['count'] >= $maxAttempts) {            return false;        }                // Registrar nova tentativa        $stmt = $conn->prepare("            INSERT INTO rate_limits (identifier, ip_address, created_at)             VALUES (?, ?, NOW())        ");        $stmt->execute([$identifier, $_SERVER['REMOTE_ADDR'] ?? 'unknown']);                return true;    } catch (Exception $e) {        // Em caso de erro, permitir acesso        return true;    }}// Função para upload de arquivos (adaptada para Heroku)function handleFileUpload($file, $ticketId) {    if (!isset($file['error']) || is_array($file['error'])) {        throw new Exception('Parâmetros de arquivo inválidos');    }        switch ($file['error']) {        case UPLOAD_ERR_OK:            break;        case UPLOAD_ERR_NO_FILE:            throw new Exception('Nenhum arquivo enviado');        case UPLOAD_ERR_INI_SIZE:        case UPLOAD_ERR_FORM_SIZE:            throw new Exception('Arquivo muito grande');        default:            throw new Exception('Erro desconhecido no upload');    }        if ($file['size'] > MAX_FILE_SIZE) {        throw new Exception('Arquivo muito grande (máximo: ' . (MAX_FILE_SIZE / 1024 / 1024) . 'MB)');    }        $extension = strtolower(pathinfo($file['name'], PATHINFO_EXTENSION));    if (!in_array($extension, ALLOWED_EXTENSIONS)) {        throw new Exception('Tipo de arquivo não permitido');    }        $filename = uniqid() . '.' . $extension;    $uploadPath = UPLOAD_PATH . $filename;        if (!is_dir(UPLOAD_PATH)) {        mkdir(UPLOAD_PATH, 0755, true);    }        if (!move_uploaded_file($file['tmp_name'], $uploadPath)) {        throw new Exception('Erro ao salvar arquivo');    }        return [        'filename' => $filename,        'original_filename' => $file['name'],        'file_path' => $uploadPath,        'file_size' => $file['size'],        'mime_type' => $file['type']    ];}// Função para verificar saúde do sistemafunction checkSystemHealth() {    $health = [        'database' => false,        'heroku' => isset($_ENV['HEROKU_APP_NAME']),        'timestamp' => date('Y-m-d H:i:s')    ];        try {        // Verificar banco de dados        $db = new Database();        $conn = $db->getConnection();        $conn->query('SELECT 1');        $health['database'] = true;    } catch (Exception $e) {        error_log('Database health check failed: ' . $e->getMessage());    }        return $health;}?>