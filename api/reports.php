<?phprequire_once 'config.php';require_once 'auth.php';class ReportsAPI {    private $db;    private $auth;        public function __construct($db) {        $this->db = $db;        $this->auth = new AuthAPI($db);    }        // Relatório de tickets por status    public function getTicketsByStatus($startDate = null, $endDate = null) {        $whereClause = "";        $params = [];                if ($startDate && $endDate) {            $whereClause = "WHERE created_at BETWEEN ? AND ?";            $params = [$startDate, $endDate];        }                $stmt = $this->db->prepare("            SELECT                 status,                COUNT(*) as count,                AVG(TIMESTAMPDIFF(HOUR, created_at, updated_at)) as avg_resolution_time            FROM tickets             $whereClause            GROUP BY status            ORDER BY count DESC        ");        $stmt->execute($params);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Relatório de performance por usuário    public function getUserPerformance($startDate = null, $endDate = null) {        $whereClause = "";        $params = [];                if ($startDate && $endDate) {            $whereClause = "WHERE t.created_at BETWEEN ? AND ?";            $params = [$startDate, $endDate];        }                $stmt = $this->db->prepare("            SELECT                 u.name as user_name,                u.role,                COUNT(t.id) as total_tickets,                COUNT(CASE WHEN t.status = 'closed' THEN 1 END) as closed_tickets,                AVG(CASE WHEN t.status = 'closed' THEN TIMESTAMPDIFF(HOUR, t.created_at, t.updated_at) END) as avg_resolution_time,                COUNT(CASE WHEN t.status = 'open' THEN 1 END) as open_tickets            FROM users u            LEFT JOIN tickets t ON u.id = t.assigned_to            $whereClause            GROUP BY u.id, u.name, u.role            ORDER BY total_tickets DESC        ");        $stmt->execute($params);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Relatório de tickets por categoria    public function getTicketsByCategory($startDate = null, $endDate = null) {        $whereClause = "";        $params = [];                if ($startDate && $endDate) {            $whereClause = "WHERE created_at BETWEEN ? AND ?";            $params = [$startDate, $endDate];        }                $stmt = $this->db->prepare("            SELECT                 category,                COUNT(*) as count,                AVG(TIMESTAMPDIFF(HOUR, created_at, updated_at)) as avg_resolution_time            FROM tickets             $whereClause            GROUP BY category            ORDER BY count DESC        ");        $stmt->execute($params);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Relatório de SLA    public function getSLAReport($startDate = null, $endDate = null) {        $whereClause = "";        $params = [];                if ($startDate && $endDate) {            $whereClause = "WHERE created_at BETWEEN ? AND ?";            $params = [$startDate, $endDate];        }                $stmt = $this->db->prepare("            SELECT                 priority,                COUNT(*) as total_tickets,                COUNT(CASE WHEN TIMESTAMPDIFF(HOUR, created_at, updated_at) <= 24 THEN 1 END) as within_sla,                COUNT(CASE WHEN TIMESTAMPDIFF(HOUR, created_at, updated_at) > 24 THEN 1 END) as sla_breach,                ROUND(                    (COUNT(CASE WHEN TIMESTAMPDIFF(HOUR, created_at, updated_at) <= 24 THEN 1 END) / COUNT(*)) * 100, 2                ) as sla_percentage            FROM tickets             $whereClause            GROUP BY priority            ORDER BY priority        ");        $stmt->execute($params);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Relatório de tendências (tickets por dia/semana/mês)    public function getTrendsReport($period = 'day', $startDate = null, $endDate = null) {        $dateFormat = $period === 'day' ? '%Y-%m-%d' : ($period === 'week' ? '%Y-%u' : '%Y-%m');        $groupBy = $period === 'day' ? 'DATE(created_at)' : ($period === 'week' ? 'YEARWEEK(created_at)' : 'DATE_FORMAT(created_at, "%Y-%m")');                $whereClause = "";        $params = [];                if ($startDate && $endDate) {            $whereClause = "WHERE created_at BETWEEN ? AND ?";            $params = [$startDate, $endDate];        }                $stmt = $this->db->prepare("            SELECT                 $groupBy as period,                COUNT(*) as total_tickets,                COUNT(CASE WHEN status = 'open' THEN 1 END) as open_tickets,                COUNT(CASE WHEN status = 'in_progress' THEN 1 END) as in_progress_tickets,                COUNT(CASE WHEN status = 'closed' THEN 1 END) as closed_tickets            FROM tickets             $whereClause            GROUP BY $groupBy            ORDER BY period        ");        $stmt->execute($params);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Relatório de satisfação do cliente    public function getCustomerSatisfactionReport($startDate = null, $endDate = null) {        $whereClause = "";        $params = [];                if ($startDate && $endDate) {            $whereClause = "WHERE t.created_at BETWEEN ? AND ?";            $params = [$startDate, $endDate];        }                $stmt = $this->db->prepare("            SELECT                 AVG(t.rating) as avg_rating,                COUNT(CASE WHEN t.rating >= 4 THEN 1 END) as satisfied_customers,                COUNT(CASE WHEN t.rating < 3 THEN 1 END) as unsatisfied_customers,                COUNT(t.id) as total_rated_tickets            FROM tickets t            $whereClause            AND t.rating IS NOT NULL        ");        $stmt->execute($params);        return $stmt->fetch(PDO::FETCH_ASSOC);    }        // Relatório de tempo de resposta    public function getResponseTimeReport($startDate = null, $endDate = null) {        $whereClause = "";        $params = [];                if ($startDate && $endDate) {            $whereClause = "WHERE created_at BETWEEN ? AND ?";            $params = [$startDate, $endDate];        }                $stmt = $this->db->prepare("            SELECT                 priority,                AVG(TIMESTAMPDIFF(MINUTE, created_at, updated_at)) as avg_response_time_minutes,                MIN(TIMESTAMPDIFF(MINUTE, created_at, updated_at)) as min_response_time_minutes,                MAX(TIMESTAMPDIFF(MINUTE, created_at, updated_at)) as max_response_time_minutes            FROM tickets             $whereClause            GROUP BY priority            ORDER BY priority        ");        $stmt->execute($params);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Relatório de tickets por departamento    public function getTicketsByDepartment($startDate = null, $endDate = null) {        $whereClause = "";        $params = [];                if ($startDate && $endDate) {            $whereClause = "WHERE t.created_at BETWEEN ? AND ?";            $params = [$startDate, $endDate];        }                $stmt = $this->db->prepare("            SELECT                 d.name as department_name,                COUNT(t.id) as total_tickets,                COUNT(CASE WHEN t.status = 'open' THEN 1 END) as open_tickets,                COUNT(CASE WHEN t.status = 'closed' THEN 1 END) as closed_tickets,                AVG(TIMESTAMPDIFF(HOUR, t.created_at, t.updated_at)) as avg_resolution_time            FROM departments d            LEFT JOIN tickets t ON d.id = t.department_id            $whereClause            GROUP BY d.id, d.name            ORDER BY total_tickets DESC        ");        $stmt->execute($params);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Relatório de custos    public function getCostReport($startDate = null, $endDate = null) {        $whereClause = "";        $params = [];                if ($startDate && $endDate) {            $whereClause = "WHERE created_at BETWEEN ? AND ?";            $params = [$startDate, $endDate];        }                $stmt = $this->db->prepare("            SELECT                 priority,                COUNT(*) as ticket_count,                AVG(TIMESTAMPDIFF(HOUR, created_at, updated_at)) as avg_hours,                COUNT(*) * AVG(TIMESTAMPDIFF(HOUR, created_at, updated_at)) * 50 as estimated_cost            FROM tickets             $whereClause            GROUP BY priority            ORDER BY estimated_cost DESC        ");        $stmt->execute($params);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Dashboard principal    public function getDashboardData($startDate = null, $endDate = null) {        $whereClause = "";        $params = [];                if ($startDate && $endDate) {            $whereClause = "WHERE created_at BETWEEN ? AND ?";            $params = [$startDate, $endDate];        }                $stmt = $this->db->prepare("            SELECT                 COUNT(*) as total_tickets,                COUNT(CASE WHEN status = 'open' THEN 1 END) as open_tickets,                COUNT(CASE WHEN status = 'in_progress' THEN 1 END) as in_progress_tickets,                COUNT(CASE WHEN status = 'closed' THEN 1 END) as closed_tickets,                AVG(TIMESTAMPDIFF(HOUR, created_at, updated_at)) as avg_resolution_time,                COUNT(CASE WHEN priority = 'high' THEN 1 END) as high_priority_tickets            FROM tickets             $whereClause        ");        $stmt->execute($params);        return $stmt->fetch(PDO::FETCH_ASSOC);    }        // Exportar relatório para CSV    public function exportToCSV($data, $filename) {        $output = fopen('php://temp', 'r+');                if (!empty($data)) {            // Cabeçalhos            fputcsv($output, array_keys($data[0]));                        // Dados            foreach ($data as $row) {                fputcsv($output, $row);            }        }                rewind($output);        $csv = stream_get_contents($output);        fclose($output);                header('Content-Type: text/csv');        header('Content-Disposition: attachment; filename="' . $filename . '"');        echo $csv;        exit;    }}?>