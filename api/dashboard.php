<?phprequire_once 'config.php';require_once 'auth.php';require_once 'reports.php';require_once 'sla.php';class DashboardManager {    private $db;    private $auth;    private $reports;    private $sla;        public function __construct($db) {        $this->db = $db;        $this->auth = new AuthAPI($db);        $this->reports = new ReportsAPI($db);        $this->sla = new SLAManager($db);    }        // Obter dados do dashboard principal    public function getDashboardData($userId, $startDate = null, $endDate = null) {        $user = $this->auth->getUser($userId);        if (!$user) return null;                $dashboardData = [            'user' => $user,            'overview' => $this->getOverviewData($userId, $startDate, $endDate),            'tickets' => $this->getTicketData($userId, $startDate, $endDate),            'performance' => $this->getPerformanceData($userId, $startDate, $endDate),            'sla' => $this->getSLAData($startDate, $endDate),            'recent_activity' => $this->getRecentActivity($userId),            'notifications' => $this->getNotifications($userId),            'charts' => $this->getChartData($startDate, $endDate)        ];                return $dashboardData;    }        // Obter dados de visão geral    private function getOverviewData($userId, $startDate, $endDate) {        $whereClause = "";        $params = [];                if ($startDate && $endDate) {            $whereClause = "WHERE created_at BETWEEN ? AND ?";            $params = [$startDate, $endDate];        }                $stmt = $this->db->prepare("            SELECT                 COUNT(*) as total_tickets,                COUNT(CASE WHEN status = 'open' THEN 1 END) as open_tickets,                COUNT(CASE WHEN status = 'in_progress' THEN 1 END) as in_progress_tickets,                COUNT(CASE WHEN status = 'closed' THEN 1 END) as closed_tickets,                COUNT(CASE WHEN priority = 'high' THEN 1 END) as high_priority_tickets,                COUNT(CASE WHEN priority = 'critical' THEN 1 END) as critical_tickets            FROM tickets             $whereClause        ");        $stmt->execute($params);        return $stmt->fetch(PDO::FETCH_ASSOC);    }        // Obter dados de tickets    private function getTicketData($userId, $startDate, $endDate) {        $whereClause = "WHERE assigned_to = ?";        $params = [$userId];                if ($startDate && $endDate) {            $whereClause .= " AND created_at BETWEEN ? AND ?";            $params[] = $startDate;            $params[] = $endDate;        }                $stmt = $this->db->prepare("            SELECT                 COUNT(*) as my_tickets,                COUNT(CASE WHEN status = 'open' THEN 1 END) as my_open_tickets,                COUNT(CASE WHEN status = 'in_progress' THEN 1 END) as my_in_progress_tickets,                COUNT(CASE WHEN status = 'closed' THEN 1 END) as my_closed_tickets,                AVG(TIMESTAMPDIFF(HOUR, created_at, updated_at)) as my_avg_resolution_time            FROM tickets             $whereClause        ");        $stmt->execute($params);        return $stmt->fetch(PDO::FETCH_ASSOC);    }        // Obter dados de performance    private function getPerformanceData($userId, $startDate, $endDate) {        $whereClause = "WHERE assigned_to = ?";        $params = [$userId];                if ($startDate && $endDate) {            $whereClause .= " AND created_at BETWEEN ? AND ?";            $params[] = $startDate;            $params[] = $endDate;        }                $stmt = $this->db->prepare("            SELECT                 COUNT(*) as tickets_resolved,                AVG(TIMESTAMPDIFF(HOUR, created_at, updated_at)) as avg_resolution_time,                COUNT(CASE WHEN rating >= 4 THEN 1 END) as satisfied_customers,                COUNT(CASE WHEN rating < 3 THEN 1 END) as unsatisfied_customers            FROM tickets             $whereClause            AND status = 'closed'        ");        $stmt->execute($params);        return $stmt->fetch(PDO::FETCH_ASSOC);    }        // Obter dados de SLA    private function getSLAData($startDate, $endDate) {        return $this->sla->getSLAStatistics($startDate, $endDate);    }        // Obter atividade recente    private function getRecentActivity($userId) {        $stmt = $this->db->prepare("            SELECT                 'ticket' as type,                t.id,                t.title,                t.status,                t.created_at            FROM tickets t            WHERE t.assigned_to = ?            UNION ALL            SELECT                 'comment' as type,                tc.ticket_id as id,                tc.comment as title,                'comment' as status,                tc.created_at            FROM ticket_comments tc            WHERE tc.created_by = ?            ORDER BY created_at DESC            LIMIT 10        ");        $stmt->execute([$userId, $userId]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter notificações    private function getNotifications($userId) {        $stmt = $this->db->prepare("            SELECT                 n.*,                t.title as ticket_title            FROM notifications n            LEFT JOIN tickets t ON n.ticket_id = t.id            WHERE n.user_id = ? AND n.is_read = 0            ORDER BY n.created_at DESC            LIMIT 10        ");        $stmt->execute([$userId]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter dados para gráficos    private function getChartData($startDate, $endDate) {        return [            'tickets_by_status' => $this->reports->getTicketsByStatus($startDate, $endDate),            'tickets_by_category' => $this->reports->getTicketsByCategory($startDate, $endDate),            'trends' => $this->reports->getTrendsReport('day', $startDate, $endDate),            'sla_by_category' => $this->sla->getSLAByCategory($startDate, $endDate)        ];    }        // Obter dashboard personalizado    public function getCustomDashboard($userId, $widgets = []) {        $dashboard = [];                foreach ($widgets as $widget) {            switch ($widget) {                case 'overview':                    $dashboard['overview'] = $this->getOverviewData($userId);                    break;                case 'tickets':                    $dashboard['tickets'] = $this->getTicketData($userId);                    break;                case 'performance':                    $dashboard['performance'] = $this->getPerformanceData($userId);                    break;                case 'sla':                    $dashboard['sla'] = $this->getSLAData();                    break;                case 'recent_activity':                    $dashboard['recent_activity'] = $this->getRecentActivity($userId);                    break;                case 'notifications':                    $dashboard['notifications'] = $this->getNotifications($userId);                    break;            }        }                return $dashboard;    }        // Obter métricas de performance    public function getPerformanceMetrics($userId, $period = '30') {        $stmt = $this->db->prepare("            SELECT                 DATE(created_at) as date,                COUNT(*) as tickets_created,                COUNT(CASE WHEN status = 'closed' THEN 1 END) as tickets_closed,                AVG(TIMESTAMPDIFF(HOUR, created_at, updated_at)) as avg_resolution_time            FROM tickets             WHERE assigned_to = ?             AND created_at >= DATE_SUB(NOW(), INTERVAL ? DAY)            GROUP BY DATE(created_at)            ORDER BY date        ");        $stmt->execute([$userId, $period]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter tickets próximos do SLA    public function getTicketsNearSLA($userId = null) {        $whereClause = "";        $params = [];                if ($userId) {            $whereClause = "WHERE assigned_to = ?";            $params = [$userId];        }                $stmt = $this->db->prepare("            SELECT                 t.*,                TIMESTAMPDIFF(HOUR, t.created_at, NOW()) as hours_elapsed,                sr.response_time_hours,                sr.resolution_time_hours            FROM tickets t            JOIN sla_rules sr ON t.category = sr.category AND t.priority = sr.priority            $whereClause            AND t.status IN ('open', 'in_progress')            AND TIMESTAMPDIFF(HOUR, t.created_at, NOW()) >= (sr.response_time_hours - 2)            ORDER BY hours_elapsed DESC        ");        $stmt->execute($params);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter estatísticas de satisfação    public function getSatisfactionStats($userId = null) {        $whereClause = "";        $params = [];                if ($userId) {            $whereClause = "WHERE assigned_to = ?";            $params = [$userId];        }                $stmt = $this->db->prepare("            SELECT                 AVG(rating) as avg_rating,                COUNT(CASE WHEN rating >= 4 THEN 1 END) as satisfied,                COUNT(CASE WHEN rating < 3 THEN 1 END) as unsatisfied,                COUNT(*) as total_rated            FROM tickets             $whereClause            AND rating IS NOT NULL        ");        $stmt->execute($params);        return $stmt->fetch(PDO::FETCH_ASSOC);    }}?>