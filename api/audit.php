<?phprequire_once 'config.php';class AuditManager {    private $db;        public function __construct($db) {        $this->db = $db;    }        // Registrar atividade    public function logActivity($userId, $action, $resource, $resourceId, $details = null) {        $stmt = $this->db->prepare("            INSERT INTO audit_logs (user_id, action, resource, resource_id, details, ip_address, user_agent, created_at)             VALUES (?, ?, ?, ?, ?, ?, ?, NOW())        ");                $ipAddress = $_SERVER['REMOTE_ADDR'] ?? 'unknown';        $userAgent = $_SERVER['HTTP_USER_AGENT'] ?? 'unknown';                return $stmt->execute([$userId, $action, $resource, $resourceId, $details, $ipAddress, $userAgent]);    }        // Obter logs de auditoria    public function getAuditLogs($filters = []) {        $whereClause = "WHERE 1=1";        $params = [];                if (isset($filters['user_id'])) {            $whereClause .= " AND user_id = ?";            $params[] = $filters['user_id'];        }                if (isset($filters['action'])) {            $whereClause .= " AND action = ?";            $params[] = $filters['action'];        }                if (isset($filters['resource'])) {            $whereClause .= " AND resource = ?";            $params[] = $filters['resource'];        }                if (isset($filters['start_date'])) {            $whereClause .= " AND created_at >= ?";            $params[] = $filters['start_date'];        }                if (isset($filters['end_date'])) {            $whereClause .= " AND created_at <= ?";            $params[] = $filters['end_date'];        }                $stmt = $this->db->prepare("            SELECT                 al.*,                u.name as user_name            FROM audit_logs al            LEFT JOIN users u ON al.user_id = u.id            $whereClause            ORDER BY al.created_at DESC            LIMIT 1000        ");        $stmt->execute($params);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter estatÃ­sticas de auditoria    public function getAuditStatistics($startDate = null, $endDate = null) {        $whereClause = "";        $params = [];                if ($startDate && $endDate) {            $whereClause = "WHERE created_at BETWEEN ? AND ?";            $params = [$startDate, $endDate];        }                $stmt = $this->db->prepare("            SELECT                 COUNT(*) as total_activities,                COUNT(DISTINCT user_id) as active_users,                COUNT(CASE WHEN action = 'login' THEN 1 END) as logins,                COUNT(CASE WHEN action = 'create' THEN 1 END) as creations,                COUNT(CASE WHEN action = 'update' THEN 1 END) as updates,                COUNT(CASE WHEN action = 'delete' THEN 1 END) as deletions            FROM audit_logs             $whereClause        ");        $stmt->execute($params);        return $stmt->fetch(PDO::FETCH_ASSOC);    }        // Limpar logs antigos    public function cleanOldLogs($days = 90) {        $stmt = $this->db->prepare("            DELETE FROM audit_logs             WHERE created_at < DATE_SUB(NOW(), INTERVAL ? DAY)        ");        return $stmt->execute([$days]);    }}?>