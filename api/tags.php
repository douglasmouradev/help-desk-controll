<?phprequire_once 'config.php';require_once 'auth.php';class TagManager {    private $db;    private $auth;        public function __construct($db) {        $this->db = $db;        $this->auth = new AuthAPI($db);    }        // Criar tag    public function createTag($name, $color = null, $description = null) {        $stmt = $this->db->prepare("            INSERT INTO tags (name, color, description, is_active)             VALUES (?, ?, ?, 1)        ");        return $stmt->execute([$name, $color, $description]);    }        // Obter todas as tags    public function getAllTags($includeInactive = false) {        $whereClause = $includeInactive ? "" : "WHERE is_active = 1";        $stmt = $this->db->prepare("            SELECT * FROM tags $whereClause ORDER BY name        ");        $stmt->execute();        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter tag por ID    public function getTag($tagId) {        $stmt = $this->db->prepare("SELECT * FROM tags WHERE id = ?");        $stmt->execute([$tagId]);        return $stmt->fetch(PDO::FETCH_ASSOC);    }        // Atualizar tag    public function updateTag($tagId, $name, $color = null, $description = null) {        $stmt = $this->db->prepare("            UPDATE tags             SET name = ?, color = ?, description = ?            WHERE id = ?        ");        return $stmt->execute([$name, $color, $description, $tagId]);    }        // Deletar tag    public function deleteTag($tagId) {        // Remover todas as associações com tickets        $stmt = $this->db->prepare("DELETE FROM ticket_tags WHERE tag_id = ?");        $stmt->execute([$tagId]);                // Deletar a tag        $stmt = $this->db->prepare("DELETE FROM tags WHERE id = ?");        return $stmt->execute([$tagId]);    }        // Ativar/desativar tag    public function toggleTag($tagId, $isActive) {        $stmt = $this->db->prepare("            UPDATE tags SET is_active = ? WHERE id = ?        ");        return $stmt->execute([$isActive ? 1 : 0, $tagId]);    }        // Adicionar tag ao ticket    public function addTagToTicket($ticketId, $tagId) {        $stmt = $this->db->prepare("            INSERT INTO ticket_tags (ticket_id, tag_id)             VALUES (?, ?)            ON DUPLICATE KEY UPDATE ticket_id = ticket_id        ");        return $stmt->execute([$ticketId, $tagId]);    }        // Remover tag do ticket    public function removeTagFromTicket($ticketId, $tagId) {        $stmt = $this->db->prepare("            DELETE FROM ticket_tags             WHERE ticket_id = ? AND tag_id = ?        ");        return $stmt->execute([$ticketId, $tagId]);    }        // Obter tags do ticket    public function getTicketTags($ticketId) {        $stmt = $this->db->prepare("            SELECT t.* FROM tags t            JOIN ticket_tags tt ON t.id = tt.tag_id            WHERE tt.ticket_id = ? AND t.is_active = 1            ORDER BY t.name        ");        $stmt->execute([$ticketId]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter tickets por tag    public function getTicketsByTag($tagId, $limit = 50) {        $stmt = $this->db->prepare("            SELECT t.* FROM tickets t            JOIN ticket_tags tt ON t.id = tt.ticket_id            WHERE tt.tag_id = ?            ORDER BY t.created_at DESC            LIMIT ?        ");        $stmt->execute([$tagId, $limit]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter estatísticas de tag    public function getTagStatistics($tagId) {        $stmt = $this->db->prepare("            SELECT                 COUNT(tt.ticket_id) as total_tickets,                COUNT(CASE WHEN t.status = 'open' THEN 1 END) as open_tickets,                COUNT(CASE WHEN t.status = 'in_progress' THEN 1 END) as in_progress_tickets,                COUNT(CASE WHEN t.status = 'closed' THEN 1 END) as closed_tickets,                AVG(TIMESTAMPDIFF(HOUR, t.created_at, t.updated_at)) as avg_resolution_time            FROM ticket_tags tt            JOIN tickets t ON tt.ticket_id = t.id            WHERE tt.tag_id = ?        ");        $stmt->execute([$tagId]);        return $stmt->fetch(PDO::FETCH_ASSOC);    }        // Obter tags mais usadas    public function getMostUsedTags($limit = 20) {        $stmt = $this->db->prepare("            SELECT                 t.*,                COUNT(tt.ticket_id) as usage_count            FROM tags t            LEFT JOIN ticket_tags tt ON t.id = tt.tag_id            WHERE t.is_active = 1            GROUP BY t.id            ORDER BY usage_count DESC            LIMIT ?        ");        $stmt->execute([$limit]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Buscar tags    public function searchTags($query) {        $stmt = $this->db->prepare("            SELECT * FROM tags             WHERE (name LIKE ? OR description LIKE ?) AND is_active = 1            ORDER BY name        ");        $searchTerm = "%$query%";        $stmt->execute([$searchTerm, $searchTerm]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter tags por cor    public function getTagsByColor($color) {        $stmt = $this->db->prepare("            SELECT * FROM tags             WHERE color = ? AND is_active = 1            ORDER BY name        ");        $stmt->execute([$color]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter tags relacionadas    public function getRelatedTags($tagId, $limit = 10) {        $stmt = $this->db->prepare("            SELECT                 t2.*,                COUNT(*) as co_occurrence            FROM ticket_tags tt1            JOIN ticket_tags tt2 ON tt1.ticket_id = tt2.ticket_id            JOIN tags t2 ON tt2.tag_id = t2.id            WHERE tt1.tag_id = ? AND t2.id != ? AND t2.is_active = 1            GROUP BY t2.id            ORDER BY co_occurrence DESC            LIMIT ?        ");        $stmt->execute([$tagId, $tagId, $limit]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter tags por categoria    public function getTagsByCategory($categoryId) {        $stmt = $this->db->prepare("            SELECT DISTINCT t.*            FROM tags t            JOIN ticket_tags tt ON t.id = tt.tag_id            JOIN tickets tk ON tt.ticket_id = tk.id            WHERE tk.category = ? AND t.is_active = 1            ORDER BY t.name        ");        $stmt->execute([$categoryId]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter tags por prioridade    public function getTagsByPriority($priority) {        $stmt = $this->db->prepare("            SELECT DISTINCT t.*            FROM tags t            JOIN ticket_tags tt ON t.id = tt.tag_id            JOIN tickets tk ON tt.ticket_id = tk.id            WHERE tk.priority = ? AND t.is_active = 1            ORDER BY t.name        ");        $stmt->execute([$priority]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter tags por status    public function getTagsByStatus($status) {        $stmt = $this->db->prepare("            SELECT DISTINCT t.*            FROM tags t            JOIN ticket_tags tt ON t.id = tt.tag_id            JOIN tickets tk ON tt.ticket_id = tk.id            WHERE tk.status = ? AND t.is_active = 1            ORDER BY t.name        ");        $stmt->execute([$status]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter tags por usuário    public function getTagsByUser($userId) {        $stmt = $this->db->prepare("            SELECT DISTINCT t.*            FROM tags t            JOIN ticket_tags tt ON t.id = tt.tag_id            JOIN tickets tk ON tt.ticket_id = tk.id            WHERE tk.assigned_to = ? AND t.is_active = 1            ORDER BY t.name        ");        $stmt->execute([$userId]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter tags por período    public function getTagsByPeriod($startDate, $endDate) {        $stmt = $this->db->prepare("            SELECT DISTINCT t.*            FROM tags t            JOIN ticket_tags tt ON t.id = tt.tag_id            JOIN tickets tk ON tt.ticket_id = tk.id            WHERE tk.created_at BETWEEN ? AND ? AND t.is_active = 1            ORDER BY t.name        ");        $stmt->execute([$startDate, $endDate]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter tags com contadores    public function getTagsWithCounts() {        $stmt = $this->db->prepare("            SELECT                 t.*,                COUNT(tt.ticket_id) as total_tickets,                COUNT(CASE WHEN tk.status = 'open' THEN 1 END) as open_tickets,                COUNT(CASE WHEN tk.status = 'in_progress' THEN 1 END) as in_progress_tickets,                COUNT(CASE WHEN tk.status = 'closed' THEN 1 END) as closed_tickets            FROM tags t            LEFT JOIN ticket_tags tt ON t.id = tt.tag_id            LEFT JOIN tickets tk ON tt.ticket_id = tk.id            WHERE t.is_active = 1            GROUP BY t.id            ORDER BY total_tickets DESC        ");        $stmt->execute();        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Criar tags padrão    public function createDefaultTags() {        $defaultTags = [            ['urgent', '#e74c3c', 'Tickets urgentes que requerem atenção imediata'],            ['bug', '#f39c12', 'Bugs reportados no sistema'],            ['feature', '#2ecc71', 'Solicitações de novas funcionalidades'],            ['documentation', '#3498db', 'Problemas relacionados à documentação'],            ['performance', '#9b59b6', 'Problemas de performance'],            ['security', '#e67e22', 'Problemas de segurança'],            ['ui', '#16a085', 'Problemas de interface do usuário'],            ['api', '#27ae60', 'Problemas relacionados à API'],            ['database', '#8e44ad', 'Problemas de banco de dados'],            ['network', '#f1c40f', 'Problemas de rede'],            ['mobile', '#34495e', 'Problemas em dispositivos móveis'],            ['desktop', '#2c3e50', 'Problemas em desktop']        ];                foreach ($defaultTags as $tag) {            $this->createTag($tag[0], $tag[1], $tag[2]);        }                return true;    }        // Obter tag por nome    public function getTagByName($name) {        $stmt = $this->db->prepare("SELECT * FROM tags WHERE name = ? AND is_active = 1");        $stmt->execute([$name]);        return $stmt->fetch(PDO::FETCH_ASSOC);    }        // Obter tags por cor    public function getTagsByColorGroup() {        $stmt = $this->db->prepare("            SELECT                 color,                COUNT(*) as tag_count,                GROUP_CONCAT(name ORDER BY name SEPARATOR ', ') as tag_names            FROM tags             WHERE is_active = 1 AND color IS NOT NULL            GROUP BY color            ORDER BY tag_count DESC        ");        $stmt->execute();        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }}?>