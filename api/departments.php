<?phprequire_once 'config.php';require_once 'auth.php';class DepartmentManager {    private $db;    private $auth;        public function __construct($db) {        $this->db = $db;        $this->auth = new AuthAPI($db);    }        // Criar departamento    public function createDepartment($name, $description, $managerId = null, $color = null) {        $stmt = $this->db->prepare("            INSERT INTO departments (name, description, manager_id, color, is_active)             VALUES (?, ?, ?, ?, 1)        ");        return $stmt->execute([$name, $description, $managerId, $color]);    }        // Obter todos os departamentos    public function getAllDepartments($includeInactive = false) {        $whereClause = $includeInactive ? "" : "WHERE is_active = 1";        $stmt = $this->db->prepare("            SELECT                 d.*,                u.name as manager_name            FROM departments d            LEFT JOIN users u ON d.manager_id = u.id            $whereClause            ORDER BY d.name        ");        $stmt->execute();        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter departamento por ID    public function getDepartment($departmentId) {        $stmt = $this->db->prepare("            SELECT                 d.*,                u.name as manager_name            FROM departments d            LEFT JOIN users u ON d.manager_id = u.id            WHERE d.id = ?        ");        $stmt->execute([$departmentId]);        return $stmt->fetch(PDO::FETCH_ASSOC);    }        // Atualizar departamento    public function updateDepartment($departmentId, $name, $description, $managerId = null, $color = null) {        $stmt = $this->db->prepare("            UPDATE departments             SET name = ?, description = ?, manager_id = ?, color = ?            WHERE id = ?        ");        return $stmt->execute([$name, $description, $managerId, $color, $departmentId]);    }        // Deletar departamento    public function deleteDepartment($departmentId) {        // Verificar se há usuários no departamento        $stmt = $this->db->prepare("SELECT COUNT(*) as count FROM users WHERE department_id = ?");        $stmt->execute([$departmentId]);        $result = $stmt->fetch(PDO::FETCH_ASSOC);                if ($result['count'] > 0) {            return false; // Não pode deletar departamento com usuários        }                $stmt = $this->db->prepare("DELETE FROM departments WHERE id = ?");        return $stmt->execute([$departmentId]);    }        // Ativar/desativar departamento    public function toggleDepartment($departmentId, $isActive) {        $stmt = $this->db->prepare("            UPDATE departments SET is_active = ? WHERE id = ?        ");        return $stmt->execute([$isActive ? 1 : 0, $departmentId]);    }        // Obter usuários do departamento    public function getDepartmentUsers($departmentId) {        $stmt = $this->db->prepare("            SELECT                 u.*,                r.name as role_name            FROM users u            LEFT JOIN roles r ON u.role_id = r.id            WHERE u.department_id = ?            ORDER BY u.name        ");        $stmt->execute([$departmentId]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter estatísticas do departamento    public function getDepartmentStatistics($departmentId, $startDate = null, $endDate = null) {        $whereClause = "WHERE t.department_id = ?";        $params = [$departmentId];                if ($startDate && $endDate) {            $whereClause .= " AND t.created_at BETWEEN ? AND ?";            $params[] = $startDate;            $params[] = $endDate;        }                $stmt = $this->db->prepare("            SELECT                 COUNT(t.id) as total_tickets,                COUNT(CASE WHEN t.status = 'open' THEN 1 END) as open_tickets,                COUNT(CASE WHEN t.status = 'in_progress' THEN 1 END) as in_progress_tickets,                COUNT(CASE WHEN t.status = 'closed' THEN 1 END) as closed_tickets,                AVG(TIMESTAMPDIFF(HOUR, t.created_at, t.updated_at)) as avg_resolution_time            FROM tickets t            $whereClause        ");        $stmt->execute($params);        return $stmt->fetch(PDO::FETCH_ASSOC);    }        // Obter departamentos com contadores    public function getDepartmentsWithCounts() {        $stmt = $this->db->prepare("            SELECT                 d.*,                COUNT(u.id) as user_count,                COUNT(t.id) as ticket_count            FROM departments d            LEFT JOIN users u ON d.id = u.department_id            LEFT JOIN tickets t ON d.id = t.department_id            WHERE d.is_active = 1            GROUP BY d.id            ORDER BY ticket_count DESC        ");        $stmt->execute();        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Criar departamentos padrão    public function createDefaultDepartments() {        $defaultDepartments = [            ['Technical Support', 'Suporte técnico e resolução de problemas', null, '#3498db'],            ['Billing', 'Cobrança e questões financeiras', null, '#e74c3c'],            ['Sales', 'Vendas e novos clientes', null, '#2ecc71'],            ['Development', 'Desenvolvimento e programação', null, '#9b59b6'],            ['Quality Assurance', 'Garantia de qualidade e testes', null, '#f39c12'],            ['Customer Service', 'Atendimento ao cliente', null, '#16a085'],            ['Human Resources', 'Recursos humanos', null, '#34495e'],            ['Marketing', 'Marketing e comunicação', null, '#e67e22']        ];                foreach ($defaultDepartments as $dept) {            $this->createDepartment($dept[0], $dept[1], $dept[2], $dept[3]);        }                return true;    }}?>