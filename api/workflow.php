<?phprequire_once 'config.php';require_once 'auth.php';require_once 'notifications.php';class WorkflowManager {    private $db;    private $auth;    private $notifications;        public function __construct($db) {        $this->db = $db;        $this->auth = new AuthAPI($db);        $this->notifications = new NotificationManager($db);    }        // Criar workflow    public function createWorkflow($name, $description, $conditions, $actions) {        $stmt = $this->db->prepare("            INSERT INTO workflows (name, description, conditions, actions, is_active)             VALUES (?, ?, ?, ?, 1)        ");        return $stmt->execute([$name, $description, json_encode($conditions), json_encode($actions)]);    }        // Executar workflow para ticket    public function executeWorkflow($ticketId) {        $ticket = $this->getTicket($ticketId);        if (!$ticket) return false;                $workflows = $this->getActiveWorkflows();                foreach ($workflows as $workflow) {            if ($this->evaluateConditions($workflow['conditions'], $ticket)) {                $this->executeActions($workflow['actions'], $ticket);            }        }                return true;    }        // Avaliar condições do workflow    private function evaluateConditions($conditions, $ticket) {        foreach ($conditions as $condition) {            $field = $condition['field'];            $operator = $condition['operator'];            $value = $condition['value'];                        $ticketValue = $ticket[$field] ?? null;                        if (!$this->evaluateCondition($ticketValue, $operator, $value)) {                return false;            }        }                return true;    }        // Avaliar condição individual    private function evaluateCondition($ticketValue, $operator, $expectedValue) {        switch ($operator) {            case 'equals':                return $ticketValue == $expectedValue;            case 'not_equals':                return $ticketValue != $expectedValue;            case 'contains':                return strpos($ticketValue, $expectedValue) !== false;            case 'not_contains':                return strpos($ticketValue, $expectedValue) === false;            case 'greater_than':                return $ticketValue > $expectedValue;            case 'less_than':                return $ticketValue < $expectedValue;            case 'in':                return in_array($ticketValue, explode(',', $expectedValue));            case 'not_in':                return !in_array($ticketValue, explode(',', $expectedValue));            default:                return false;        }    }        // Executar ações do workflow    private function executeActions($actions, $ticket) {        foreach ($actions as $action) {            $this->executeAction($action, $ticket);        }    }        // Executar ação individual    private function executeAction($action, $ticket) {        switch ($action['type']) {            case 'change_status':                $this->changeTicketStatus($ticket['id'], $action['value']);                break;            case 'assign_ticket':                $this->assignTicket($ticket['id'], $action['value']);                break;            case 'send_notification':                $this->sendWorkflowNotification($ticket, $action);                break;            case 'add_tag':                $this->addTagToTicket($ticket['id'], $action['value']);                break;            case 'set_priority':                $this->setTicketPriority($ticket['id'], $action['value']);                break;            case 'add_comment':                $this->addCommentToTicket($ticket['id'], $action['value']);                break;            case 'escalate':                $this->escalateTicket($ticket['id']);                break;        }    }        // Mudar status do ticket    private function changeTicketStatus($ticketId, $status) {        $stmt = $this->db->prepare("            UPDATE tickets SET status = ?, updated_at = NOW() WHERE id = ?        ");        return $stmt->execute([$status, $ticketId]);    }        // Atribuir ticket    private function assignTicket($ticketId, $userId) {        $stmt = $this->db->prepare("            UPDATE tickets SET assigned_to = ?, updated_at = NOW() WHERE id = ?        ");        return $stmt->execute([$userId, $ticketId]);    }        // Enviar notificação do workflow    private function sendWorkflowNotification($ticket, $action) {        $subject = $action['subject'] ?? 'Notificação do Sistema';        $message = $action['message'] ?? 'Ticket atualizado automaticamente';                $this->notifications->sendEmail(            $ticket['email'],            $subject,            $message        );    }        // Adicionar tag ao ticket    private function addTagToTicket($ticketId, $tag) {        $stmt = $this->db->prepare("            INSERT INTO ticket_tags (ticket_id, tag) VALUES (?, ?)        ");        return $stmt->execute([$ticketId, $tag]);    }        // Definir prioridade do ticket    private function setTicketPriority($ticketId, $priority) {        $stmt = $this->db->prepare("            UPDATE tickets SET priority = ?, updated_at = NOW() WHERE id = ?        ");        return $stmt->execute([$priority, $ticketId]);    }        // Adicionar comentário ao ticket    private function addCommentToTicket($ticketId, $comment) {        $stmt = $this->db->prepare("            INSERT INTO ticket_comments (ticket_id, comment, created_by, created_at)             VALUES (?, ?, 'system', NOW())        ");        return $stmt->execute([$ticketId, $comment]);    }        // Escalar ticket    private function escalateTicket($ticketId) {        $stmt = $this->db->prepare("            UPDATE tickets SET priority = 'high', updated_at = NOW() WHERE id = ?        ");        return $stmt->execute([$ticketId]);    }        // Obter ticket    private function getTicket($ticketId) {        $stmt = $this->db->prepare("SELECT * FROM tickets WHERE id = ?");        $stmt->execute([$ticketId]);        return $stmt->fetch(PDO::FETCH_ASSOC);    }        // Obter workflows ativos    private function getActiveWorkflows() {        $stmt = $this->db->prepare("SELECT * FROM workflows WHERE is_active = 1");        $stmt->execute();        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Criar workflow de escalação automática    public function createEscalationWorkflow() {        $conditions = [            ['field' => 'status', 'operator' => 'equals', 'value' => 'open'],            ['field' => 'priority', 'operator' => 'equals', 'value' => 'high']        ];                $actions = [            ['type' => 'send_notification', 'subject' => 'Ticket de Alta Prioridade', 'message' => 'Ticket requer atenção imediata'],            ['type' => 'assign_ticket', 'value' => '1'] // Assumindo que usuário 1 é supervisor        ];                return $this->createWorkflow(            'Escalação Automática',            'Escala tickets de alta prioridade automaticamente',            $conditions,            $actions        );    }        // Criar workflow de SLA    public function createSLAWorkflow() {        $conditions = [            ['field' => 'status', 'operator' => 'not_equals', 'value' => 'closed']        ];                $actions = [            ['type' => 'add_tag', 'value' => 'sla_breach'],            ['type' => 'send_notification', 'subject' => 'SLA Breach', 'message' => 'Ticket excedeu o tempo de SLA']        ];                return $this->createWorkflow(            'SLA Breach',            'Identifica tickets que excederam o SLA',            $conditions,            $actions        );    }        // Criar workflow de follow-up    public function createFollowUpWorkflow() {        $conditions = [            ['field' => 'status', 'operator' => 'equals', 'value' => 'closed']        ];                $actions = [            ['type' => 'send_notification', 'subject' => 'Ticket Fechado', 'message' => 'Seu ticket foi fechado. Avalie nosso atendimento.'],            ['type' => 'add_comment', 'value' => 'Ticket fechado automaticamente pelo sistema']        ];                return $this->createWorkflow(            'Follow-up',            'Envia notificação quando ticket é fechado',            $conditions,            $actions        );    }        // Obter todos os workflows    public function getAllWorkflows() {        $stmt = $this->db->prepare("SELECT * FROM workflows ORDER BY name");        $stmt->execute();        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Ativar/desativar workflow    public function toggleWorkflow($workflowId, $isActive) {        $stmt = $this->db->prepare("            UPDATE workflows SET is_active = ? WHERE id = ?        ");        return $stmt->execute([$isActive ? 1 : 0, $workflowId]);    }        // Deletar workflow    public function deleteWorkflow($workflowId) {        $stmt = $this->db->prepare("DELETE FROM workflows WHERE id = ?");        return $stmt->execute([$workflowId]);    }}?>