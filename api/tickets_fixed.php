<?phprequire_once 'config.php';require_once 'notifications.php';class TicketsController {    private $db;        public function __construct() {        $this->db = new Database();    }        public function index() {        // Para listar tickets, verificar se há token        $user = null;        if (isset($_SERVER['HTTP_AUTHORIZATION'])) {            try {                $user = requireAuth();            } catch (Exception $e) {                // Se não conseguir autenticar, continuar sem usuário                $user = null;            }        }                $page = (int)($_GET['page'] ?? 1);        $limit = (int)($_GET['limit'] ?? 20);        $offset = ($page - 1) * $limit;                try {            $conn = $this->db->getConnection();                        // Query simples para listar tickets            $sql = "SELECT t.*, u.name as user_name, u.email as user_email                     FROM tickets t                     LEFT JOIN users u ON t.user_id = u.id                     ORDER BY t.created_at DESC                     LIMIT ? OFFSET ?";                        $stmt = $conn->prepare($sql);            $stmt->execute([$limit, $offset]);            $tickets = $stmt->fetchAll();                        ApiResponse::success($tickets, 'Tickets carregados com sucesso');                    } catch (Exception $e) {            ApiResponse::error('Erro ao carregar tickets', 500, $e->getMessage());        }    }        public function create() {        // Para criar tickets, não exigir autenticação por enquanto        $input = json_decode(file_get_contents('php://input'), true);                // Validar dados obrigatórios        $missing = Validator::validateRequired(['title', 'description'], $input);        if (!empty($missing)) {            ApiResponse::error('Campos obrigatórios: ' . implode(', ', $missing), 400);        }                $title = Validator::sanitizeInput($input['title']);        $description = Validator::sanitizeInput($input['description']);        $priority = $input['priority'] ?? 'medium';        $category = $input['category'] ?? 'Geral';                try {            $conn = $this->db->getConnection();                        // Por enquanto, usar usuário admin como padrão            $stmt = $conn->prepare("SELECT id FROM users WHERE username = 'admin' LIMIT 1");            $stmt->execute();            $adminUser = $stmt->fetch();                        if (!$adminUser) {                ApiResponse::error('Usuário admin não encontrado', 500);            }                        $stmt = $conn->prepare("                INSERT INTO tickets (title, description, status, priority, category, user_id, created_at, updated_at)                 VALUES (?, ?, 'open', ?, ?, ?, NOW(), NOW())            ");                        $stmt->execute([$title, $description, $priority, $category, $adminUser['id']]);            $ticketId = $conn->lastInsertId();                        // Log de atividade            logActivity($adminUser['id'], 'TICKET_CREATED', $ticketId, true);                        ApiResponse::success([                'id' => $ticketId,                'title' => $title,                'description' => $description,                'status' => 'open',                'priority' => $priority,                'category' => $category,                'created_at' => date('Y-m-d H:i:s')            ], 'Ticket criado com sucesso');                    } catch (Exception $e) {            ApiResponse::error('Erro ao criar ticket', 500, $e->getMessage());        }    }        public function update() {        $user = requireAuth();                $input = json_decode(file_get_contents('php://input'), true);        $ticketId = $input['id'] ?? null;                if (!$ticketId) {            ApiResponse::error('ID do ticket não fornecido', 400);        }                try {            $conn = $this->db->getConnection();                        // Verificar se o ticket existe            $stmt = $conn->prepare("SELECT * FROM tickets WHERE id = ?");            $stmt->execute([$ticketId]);            $ticket = $stmt->fetch();                        if (!$ticket) {                ApiResponse::error('Ticket não encontrado', 404);            }                        // Atualizar campos permitidos            $allowedFields = ['status', 'priority', 'assigned_to'];            $updateFields = [];            $params = [];                        foreach ($allowedFields as $field) {                if (isset($input[$field])) {                    $updateFields[] = "$field = ?";                    $params[] = $input[$field];                }            }                        if (empty($updateFields)) {                ApiResponse::error('Nenhum campo para atualizar', 400);            }                        $updateFields[] = "updated_at = NOW()";            $params[] = $ticketId;                        $sql = "UPDATE tickets SET " . implode(', ', $updateFields) . " WHERE id = ?";            $stmt = $conn->prepare($sql);            $stmt->execute($params);                        // Log de atividade            logActivity($user['user_id'], 'TICKET_UPDATED', $ticketId, true);                        ApiResponse::success(null, 'Ticket atualizado com sucesso');                    } catch (Exception $e) {            ApiResponse::error('Erro ao atualizar ticket', 500, $e->getMessage());        }    }        public function delete() {        $user = requireAuth();                $ticketId = $_GET['id'] ?? null;                if (!$ticketId) {            ApiResponse::error('ID do ticket não fornecido', 400);        }                try {            $conn = $this->db->getConnection();                        // Verificar se o ticket existe            $stmt = $conn->prepare("SELECT * FROM tickets WHERE id = ?");            $stmt->execute([$ticketId]);            $ticket = $stmt->fetch();                        if (!$ticket) {                ApiResponse::error('Ticket não encontrado', 404);            }                        // Deletar ticket            $stmt = $conn->prepare("DELETE FROM tickets WHERE id = ?");            $stmt->execute([$ticketId]);                        // Log de atividade            logActivity($user['user_id'], 'TICKET_DELETED', $ticketId, true);                        ApiResponse::success(null, 'Ticket deletado com sucesso');                    } catch (Exception $e) {            ApiResponse::error('Erro ao deletar ticket', 500, $e->getMessage());        }    }}// Processar requisiçãotry {    $tickets = new TicketsController();        $action = $_GET['action'] ?? 'index';        switch ($action) {        case 'list':        case 'index':            $tickets->index();            break;        case 'create':            $tickets->create();            break;        case 'update':            $tickets->update();            break;        case 'delete':            $tickets->delete();            break;        default:            ApiResponse::error('Ação não encontrada', 404);    }    } catch (Exception $e) {    ApiResponse::error('Erro interno do servidor', 500, $e->getMessage());}?>