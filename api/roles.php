<?phprequire_once 'config.php';require_once 'auth.php';class RoleManager {    private $db;    private $auth;        public function __construct($db) {        $this->db = $db;        $this->auth = new AuthAPI($db);    }        // Criar role    public function createRole($name, $description, $permissions = []) {        $stmt = $this->db->prepare("            INSERT INTO roles (name, description, is_active)             VALUES (?, ?, 1)        ");        $result = $stmt->execute([$name, $description]);                if ($result) {            $roleId = $this->db->lastInsertId();            $this->assignPermissionsToRole($roleId, $permissions);        }                return $result;    }        // Obter todas as roles    public function getAllRoles($includeInactive = false) {        $whereClause = $includeInactive ? "" : "WHERE is_active = 1";        $stmt = $this->db->prepare("            SELECT * FROM roles $whereClause ORDER BY name        ");        $stmt->execute();        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter role por ID    public function getRole($roleId) {        $stmt = $this->db->prepare("SELECT * FROM roles WHERE id = ?");        $stmt->execute([$roleId]);        return $stmt->fetch(PDO::FETCH_ASSOC);    }        // Atualizar role    public function updateRole($roleId, $name, $description) {        $stmt = $this->db->prepare("            UPDATE roles             SET name = ?, description = ?            WHERE id = ?        ");        return $stmt->execute([$name, $description, $roleId]);    }        // Deletar role    public function deleteRole($roleId) {        // Verificar se há usuários com esta role        $stmt = $this->db->prepare("SELECT COUNT(*) as count FROM users WHERE role_id = ?");        $stmt->execute([$roleId]);        $result = $stmt->fetch(PDO::FETCH_ASSOC);                if ($result['count'] > 0) {            return false; // Não pode deletar role com usuários        }                $stmt = $this->db->prepare("DELETE FROM roles WHERE id = ?");        return $stmt->execute([$roleId]);    }        // Ativar/desativar role    public function toggleRole($roleId, $isActive) {        $stmt = $this->db->prepare("            UPDATE roles SET is_active = ? WHERE id = ?        ");        return $stmt->execute([$isActive ? 1 : 0, $roleId]);    }        // Atribuir permissões à role    public function assignPermissionsToRole($roleId, $permissionIds) {        // Remover permissões existentes        $stmt = $this->db->prepare("DELETE FROM role_permissions WHERE role_id = ?");        $stmt->execute([$roleId]);                // Adicionar novas permissões        foreach ($permissionIds as $permissionId) {            $stmt = $this->db->prepare("                INSERT INTO role_permissions (role_id, permission_id)                 VALUES (?, ?)            ");            $stmt->execute([$roleId, $permissionId]);        }                return true;    }        // Obter permissões da role    public function getRolePermissions($roleId) {        $stmt = $this->db->prepare("            SELECT p.* FROM permissions p            JOIN role_permissions rp ON p.id = rp.permission_id            WHERE rp.role_id = ?            ORDER BY p.name        ");        $stmt->execute([$roleId]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter usuários da role    public function getRoleUsers($roleId) {        $stmt = $this->db->prepare("            SELECT                 u.*,                d.name as department_name            FROM users u            LEFT JOIN departments d ON u.department_id = d.id            WHERE u.role_id = ?            ORDER BY u.name        ");        $stmt->execute([$roleId]);        return $stmt->fetchAll(PDO::FETCH_ASSOC);    }        // Obter estatísticas da role    public function getRoleStatistics($roleId) {        $stmt = $this->db->prepare("            SELECT                 COUNT(u.id) as user_count,                COUNT(t.id) as ticket_count            FROM roles r            LEFT JOIN users u ON r.id = u.role_id            LEFT JOIN tickets t ON u.id = t.assigned_to            WHERE r.id = ?        ");        $stmt->execute([$roleId]);        return $stmt->fetch(PDO::FETCH_ASSOC);    }        // Criar roles padrão    public function createDefaultRoles() {        $defaultRoles = [            ['Admin', 'Administrador do sistema com acesso total'],            ['Manager', 'Gerente com acesso a relatórios e gerenciamento'],            ['Support', 'Agente de suporte com acesso a tickets'],            ['User', 'Usuário final com acesso limitado']        ];                foreach ($defaultRoles as $role) {            $this->createRole($role[0], $role[1]);        }                return true;    }}?>