<?phprequire_once 'config.php';require_once 'auth.php';require_once 'permissions.php';require_once 'reports.php';require_once 'workflow.php';require_once 'sla.php';require_once 'categories.php';require_once 'tags.php';require_once 'comments.php';require_once 'departments.php';require_once 'roles.php';require_once 'dashboard.php';require_once 'notifications_advanced.php';require_once 'audit.php';class SystemIntegration {    private $db;    private $auth;    private $permissions;    private $reports;    private $workflow;    private $sla;    private $categories;    private $tags;    private $comments;    private $departments;    private $roles;    private $dashboard;    private $notifications;    private $audit;        public function __construct($db) {        $this->db = $db;        $this->auth = new AuthAPI($db);        $this->permissions = new PermissionManager($db);        $this->reports = new ReportsAPI($db);        $this->workflow = new WorkflowManager($db);        $this->sla = new SLAManager($db);        $this->categories = new CategoryManager($db);        $this->tags = new TagManager($db);        $this->comments = new CommentManager($db);        $this->departments = new DepartmentManager($db);        $this->roles = new RoleManager($db);        $this->dashboard = new DashboardManager($db);        $this->notifications = new AdvancedNotificationManager($db);        $this->audit = new AuditManager($db);    }        // Inicializar sistema completo    public function initializeSystem() {        try {            // Criar dados padrão            $this->createDefaultData();                        // Configurar workflows padrão            $this->setupDefaultWorkflows();                        // Configurar SLA padrão            $this->sla->createDefaultSLA();                        return ['success' => true, 'message' => 'Sistema inicializado com sucesso'];        } catch (Exception $e) {            return ['success' => false, 'message' => 'Erro ao inicializar sistema: ' . $e->getMessage()];        }    }        // Criar dados padrão    private function createDefaultData() {        $this->roles->createDefaultRoles();        $this->departments->createDefaultDepartments();        $this->categories->createDefaultCategories();        $this->tags->createDefaultTags();    }        // Configurar workflows padrão    private function setupDefaultWorkflows() {        $this->workflow->createEscalationWorkflow();        $this->workflow->createSLAWorkflow();        $this->workflow->createFollowUpWorkflow();    }        // Obter dados completos do sistema    public function getSystemData($userId) {        return [            'user' => $this->auth->getUser($userId),            'permissions' => $this->permissions->getUserPermissions($userId),            'dashboard' => $this->dashboard->getDashboardData($userId),            'departments' => $this->departments->getAllDepartments(),            'categories' => $this->categories->getAllCategories(),            'tags' => $this->tags->getAllTags(),            'roles' => $this->roles->getAllRoles()        ];    }        // Verificar permissões do usuário    public function checkUserPermissions($userId, $permission) {        return $this->permissions->hasPermission($userId, $permission);    }        // Obter relatórios do sistema    public function getSystemReports($userId, $filters = []) {        if (!$this->permissions->canViewReports($userId)) {            return ['error' => 'Sem permissão para visualizar relatórios'];        }                return [            'overview' => $this->reports->getDashboardData($filters['start_date'] ?? null, $filters['end_date'] ?? null),            'tickets_by_status' => $this->reports->getTicketsByStatus($filters['start_date'] ?? null, $filters['end_date'] ?? null),            'user_performance' => $this->reports->getUserPerformance($filters['start_date'] ?? null, $filters['end_date'] ?? null),            'sla_statistics' => $this->sla->getSLAStatistics($filters['start_date'] ?? null, $filters['end_date'] ?? null)        ];    }        // Executar workflow para ticket    public function executeTicketWorkflow($ticketId) {        $this->workflow->executeWorkflow($ticketId);        $this->sla->checkTicketSLA($ticketId);    }        // Obter estatísticas do sistema    public function getSystemStatistics() {        return [            'users' => $this->getUserCount(),            'tickets' => $this->getTicketCount(),            'departments' => $this->departments->getDepartmentsWithCounts(),            'categories' => $this->categories->getCategoriesWithCounts(),            'tags' => $this->tags->getTagsWithCounts(),            'sla' => $this->sla->getSLAStatistics()        ];    }        // Obter contagem de usuários    private function getUserCount() {        $stmt = $this->db->prepare("SELECT COUNT(*) as count FROM users WHERE active = 1");        $stmt->execute();        return $stmt->fetch(PDO::FETCH_ASSOC)['count'];    }        // Obter contagem de tickets    private function getTicketCount() {        $stmt = $this->db->prepare("SELECT COUNT(*) as count FROM tickets");        $stmt->execute();        return $stmt->fetch(PDO::FETCH_ASSOC)['count'];    }}?>