<?php// Teste específico da autenticaçãoheader('Content-Type: application/json; charset=utf-8');header('Access-Control-Allow-Origin: *');header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');header('Access-Control-Allow-Headers: Content-Type, Authorization');// Tratar requisições OPTIONS (preflight)if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {    http_response_code(200);    exit();}try {    // Incluir configuração    require_once 'api/config.php';        // Testar login com usuário admin    $username = 'admin';    $password = 'admin123';        $db = new Database();    $conn = $db->getConnection();        // Buscar usuário    $stmt = $conn->prepare("        SELECT id, name, email, username, password_hash, user_type, active         FROM users         WHERE (username = ? OR email = ?) AND active = 1    ");    $stmt->execute([$username, $username]);    $user = $stmt->fetch();        if (!$user) {        throw new Exception('Usuário não encontrado');    }        // Verificar senha    $passwordValid = verifyPassword($password, $user['password_hash']);        if (!$passwordValid) {        throw new Exception('Senha incorreta');    }        // Gerar token JWT    $payload = [        'user_id' => $user['id'],        'username' => $user['username'],        'type' => $user['user_type'],        'exp' => time() + JWT_EXPIRY    ];        $token = JWT::encode($payload);        // Remover dados sensíveis    unset($user['password_hash']);        echo json_encode([        'success' => true,        'message' => 'Autenticação funcionando corretamente',        'data' => [            'token' => $token,            'user' => $user        ],        'timestamp' => date('Y-m-d H:i:s')    ]);    } catch (Exception $e) {    http_response_code(500);    echo json_encode([        'success' => false,        'message' => 'Erro na autenticação',        'error' => $e->getMessage(),        'timestamp' => date('Y-m-d H:i:s')    ]);}?>