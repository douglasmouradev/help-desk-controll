<?php// Teste final do sistema de ticketsheader('Content-Type: application/json; charset=utf-8');header('Access-Control-Allow-Origin: *');header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');header('Access-Control-Allow-Headers: Content-Type, Authorization');// Tratar requisições OPTIONS (preflight)if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {    http_response_code(200);    exit();}try {    // Incluir configuração    require_once 'api/config.php';        $db = new Database();    $conn = $db->getConnection();        // Testar autenticação    $username = 'admin';    $password = 'admin123';        $stmt = $conn->prepare("        SELECT id, name, email, username, password_hash, user_type, active         FROM users         WHERE (username = ? OR email = ?) AND active = 1    ");    $stmt->execute([$username, $username]);    $user = $stmt->fetch();        if (!$user || !verifyPassword($password, $user['password_hash'])) {        throw new Exception('Credenciais inválidas');    }        // Gerar token    $payload = [        'user_id' => $user['id'],        'username' => $user['username'],        'type' => $user['user_type'],        'exp' => time() + JWT_EXPIRY    ];        $token = JWT::encode($payload);        // Buscar tickets    $stmt = $conn->query("        SELECT t.*, u.name as user_name         FROM tickets t         LEFT JOIN users u ON t.user_id = u.id         ORDER BY t.created_at DESC    ");    $tickets = $stmt->fetchAll();        // Buscar usuários    $stmt = $conn->query("SELECT id, name, email, username, user_type, active FROM users");    $users = $stmt->fetchAll();        echo json_encode([        'success' => true,        'message' => 'Sistema funcionando corretamente',        'data' => [            'token' => $token,            'user' => [                'id' => $user['id'],                'name' => $user['name'],                'email' => $user['email'],                'username' => $user['username'],                'type' => $user['user_type']            ],            'tickets' => $tickets,            'users' => $users        ],        'stats' => [            'total_tickets' => count($tickets),            'total_users' => count($users),            'open_tickets' => count(array_filter($tickets, fn($t) => $t['status'] === 'open')),            'in_progress_tickets' => count(array_filter($tickets, fn($t) => $t['status'] === 'in_progress')),            'closed_tickets' => count(array_filter($tickets, fn($t) => $t['status'] === 'closed'))        ],        'timestamp' => date('Y-m-d H:i:s')    ]);    } catch (Exception $e) {    http_response_code(500);    echo json_encode([        'success' => false,        'message' => 'Erro no sistema',        'error' => $e->getMessage(),        'timestamp' => date('Y-m-d H:i:s')    ]);}?>