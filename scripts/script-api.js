// Sistema Help Desk - Controll IT Engineering Technology (Versão com API)class HelpDeskSystemAPI {    constructor() {        this.currentUser = null;        this.apiBaseUrl = '/api/';        this.token = localStorage.getItem('authToken');                this.init();    }    init() {        this.setupEventListeners();        this.showPage('loginPage');                // Verificar se já está logado        if (this.token) {            this.verifyToken();        }    }    // Event Listeners    setupEventListeners() {        // Login form        document.getElementById('loginForm').addEventListener('submit', (e) => this.handleLogin(e));                // Logout buttons        document.getElementById('logoutBtn').addEventListener('click', () => this.logout());        document.getElementById('supportLogoutBtn').addEventListener('click', () => this.logout());        document.getElementById('adminLogoutBtn').addEventListener('click', () => this.logout());                // New ticket form        document.getElementById('newTicketForm').addEventListener('submit', (e) => this.handleNewTicket(e));                // Admin tabs        document.querySelectorAll('.tab-btn').forEach(btn => {            btn.addEventListener('click', (e) => this.switchTab(e.target.dataset.tab));        });                // Filters        document.getElementById('statusFilter').addEventListener('change', () => this.filterSupportTickets());        document.getElementById('priorityFilter').addEventListener('change', () => this.filterSupportTickets());        document.getElementById('adminStatusFilter').addEventListener('change', () => this.filterAdminTickets());        document.getElementById('adminPriorityFilter').addEventListener('change', () => this.filterAdminTickets());        document.getElementById('adminUserFilter').addEventListener('change', () => this.filterAdminTickets());                // User management        document.getElementById('addUserBtn').addEventListener('click', () => this.showUserModal());        document.getElementById('userForm').addEventListener('submit', (e) => this.handleUserForm(e));                // Modal close buttons        document.querySelectorAll('.close').forEach(btn => {            btn.addEventListener('click', () => this.closeModals());        });                // Mobile navigation        document.getElementById('navToggle').addEventListener('click', () => this.toggleMobileNav());                // Close modals when clicking outside        window.addEventListener('click', (e) => {            if (e.target.classList.contains('modal')) {                this.closeModals();            }        });    }    // API Helper Methods    async apiRequest(endpoint, method = 'GET', data = null) {        const url = this.apiBaseUrl + endpoint;        const options = {            method: method,            headers: {                'Content-Type': 'application/json',            }        };        if (this.token) {            options.headers['Authorization'] = `Bearer ${this.token}`;        }        if (data && (method === 'POST' || method === 'PUT')) {            options.body = JSON.stringify(data);        }        try {            const response = await fetch(url, options);            const result = await response.json();            if (!response.ok) {                if (response.status === 401) {                    this.logout();                    throw new Error('Sessão expirada. Faça login novamente.');                }                throw new Error(result.message || 'Erro na requisição');            }            return result;        } catch (error) {            console.error('API Error:', error);            throw error;        }    }    // Authentication    async handleLogin(e) {        e.preventDefault();        const formData = new FormData(e.target);                const loginData = {            username: formData.get('username'),            password: formData.get('password')        };        try {            this.showLoading(true);            const response = await this.apiRequest('auth/login', 'POST', loginData);                        this.token = response.data.token;            this.currentUser = response.data.user;                        localStorage.setItem('authToken', this.token);            localStorage.setItem('currentUser', JSON.stringify(this.currentUser));                        await this.login(this.currentUser);                    } catch (error) {            alert('Erro no login: ' + error.message);        } finally {            this.showLoading(false);        }    }    async verifyToken() {        try {            const response = await this.apiRequest('auth/profile');            this.currentUser = response.data;            await this.login(this.currentUser);        } catch (error) {            this.logout();        }    }    async login(user) {        this.currentUser = user;        this.updateNavigation();                switch(user.user_type) {            case 'user':                this.showUserDashboard();                break;            case 'support':                this.showSupportDashboard();                break;            case 'admin':                this.showAdminDashboard();                break;        }    }    logout() {        this.currentUser = null;        this.token = null;        localStorage.removeItem('authToken');        localStorage.removeItem('currentUser');        this.showPage('loginPage');        this.updateNavigation();        document.getElementById('loginForm').reset();    }    // Dashboard Management    async showUserDashboard() {        this.showPage('userDashboard');        document.getElementById('userName').textContent = this.currentUser.name;        await this.updateUserStats();        await this.loadUserTickets();        await this.loadCategories();    }    async showSupportDashboard() {        this.showPage('supportDashboard');        document.getElementById('supportUserName').textContent = this.currentUser.name;        await this.updateSupportStats();        await this.loadSupportTickets();        await this.loadCategories();    }    async showAdminDashboard() {        this.showPage('adminDashboard');        document.getElementById('adminUserName').textContent = this.currentUser.name;        await this.updateAdminStats();        await this.loadAdminTickets();        await this.loadUsers();        await this.loadCategories();        await this.loadCharts();        await this.populateUserFilter();    }    // Page Management    showPage(pageId) {        document.querySelectorAll('.page').forEach(page => page.classList.remove('active'));        document.getElementById(pageId).classList.add('active');    }    updateNavigation() {        const navMenu = document.getElementById('navMenu');        if (this.currentUser) {            navMenu.innerHTML = `                <li><span class="nav-link">Bem-vindo, ${this.currentUser.name}</span></li>                <li><a href="#" class="nav-link" onclick="helpDesk.logout()">Sair</a></li>            `;        } else {            navMenu.innerHTML = '<li><a href="#" class="nav-link active" data-page="login">Login</a></li>';        }    }    // Ticket Management    async handleNewTicket(e) {        e.preventDefault();        const formData = new FormData(e.target);                const ticketData = {            title: formData.get('title'),            description: formData.get('description'),            category_id: await this.getCategoryId(formData.get('category')),            priority_id: await this.getPriorityId(formData.get('priority'))        };        try {            this.showLoading(true);            await this.apiRequest('tickets', 'POST', ticketData);                        alert('Chamado criado com sucesso!');            e.target.reset();            await this.updateUserStats();            await this.loadUserTickets();                    } catch (error) {            alert('Erro ao criar chamado: ' + error.message);        } finally {            this.showLoading(false);        }    }    async updateTicketStatus(ticketId, status, assignedTo = null) {        try {            const updateData = { status_id: await this.getStatusId(status) };            if (assignedTo) {                updateData.assigned_to = assignedTo;            }                        await this.apiRequest(`tickets/${ticketId}`, 'PUT', updateData);            await this.updateStats();                        if (this.currentUser.user_type === 'support') {                await this.loadSupportTickets();            } else if (this.currentUser.user_type === 'admin') {                await this.loadAdminTickets();            }                    } catch (error) {            alert('Erro ao atualizar status: ' + error.message);        }    }    async deleteTicket(ticketId) {        if (confirm('Tem certeza que deseja excluir este chamado?')) {            try {                await this.apiRequest(`tickets/${ticketId}`, 'DELETE');                await this.updateStats();                await this.loadAdminTickets();            } catch (error) {                alert('Erro ao excluir chamado: ' + error.message);            }        }    }    // Statistics    async updateUserStats() {        try {            const response = await this.apiRequest('tickets/stats');            const stats = response.data;                        document.getElementById('userOpenTickets').textContent = stats.open || 0;            document.getElementById('userPendingTickets').textContent = stats.in_progress || 0;            document.getElementById('userClosedTickets').textContent = stats.closed || 0;        } catch (error) {            console.error('Erro ao carregar estatísticas do usuário:', error);        }    }    async updateSupportStats() {        try {            const response = await this.apiRequest('tickets/stats');            const stats = response.data;                        document.getElementById('supportOpenTickets').textContent = stats.open_tickets || 0;            document.getElementById('supportAssignedTickets').textContent = stats.assigned_to_me || 0;            document.getElementById('supportInProgressTickets').textContent = stats.in_progress || 0;            document.getElementById('supportClosedTickets').textContent = stats.closed || 0;        } catch (error) {            console.error('Erro ao carregar estatísticas de suporte:', error);        }    }    async updateAdminStats() {        try {            const response = await this.apiRequest('tickets/stats');            const stats = response.data;                        document.getElementById('adminTotalTickets').textContent = stats.total_tickets || 0;            document.getElementById('adminTotalUsers').textContent = stats.total_users || 0;            document.getElementById('adminSupportUsers').textContent = stats.support_users || 0;            document.getElementById('adminAvgResolutionTime').textContent = Math.round(stats.avg_resolution_time || 0) + 'h';        } catch (error) {            console.error('Erro ao carregar estatísticas administrativas:', error);        }    }    async updateStats() {        if (this.currentUser) {            switch(this.currentUser.user_type) {                case 'user':                    await this.updateUserStats();                    await this.loadUserTickets();                    break;                case 'support':                    await this.updateSupportStats();                    await this.loadSupportTickets();                    break;                case 'admin':                    await this.updateAdminStats();                    await this.loadAdminTickets();                    break;            }        }    }    // Ticket Loading and Display    async loadUserTickets() {        try {            const response = await this.apiRequest('tickets');            this.renderTickets(response.data.tickets, 'userTicketsBody', 'user');        } catch (error) {            console.error('Erro ao carregar chamados do usuário:', error);        }    }    async loadSupportTickets() {        await this.filterSupportTickets();    }    async loadAdminTickets() {        await this.filterAdminTickets();    }    async filterSupportTickets() {        try {            const statusFilter = document.getElementById('statusFilter').value;            const priorityFilter = document.getElementById('priorityFilter').value;                        let endpoint = 'tickets';            const params = [];                        if (statusFilter) params.push(`status=${statusFilter}`);            if (priorityFilter) params.push(`priority=${priorityFilter}`);                        if (params.length > 0) {                endpoint += '?' + params.join('&');            }                        const response = await this.apiRequest(endpoint);            this.renderTickets(response.data.tickets, 'supportTicketsBody', 'support');        } catch (error) {            console.error('Erro ao filtrar chamados de suporte:', error);        }    }    async filterAdminTickets() {        try {            const statusFilter = document.getElementById('adminStatusFilter').value;            const priorityFilter = document.getElementById('adminPriorityFilter').value;            const userFilter = document.getElementById('adminUserFilter').value;                        let endpoint = 'tickets';            const params = [];                        if (statusFilter) params.push(`status=${statusFilter}`);            if (priorityFilter) params.push(`priority=${priorityFilter}`);            if (userFilter) params.push(`user_id=${userFilter}`);                        if (params.length > 0) {                endpoint += '?' + params.join('&');            }                        const response = await this.apiRequest(endpoint);            this.renderTickets(response.data.tickets, 'adminTicketsBody', 'admin');        } catch (error) {            console.error('Erro ao filtrar chamados administrativos:', error);        }    }    renderTickets(tickets, containerId, userType) {        const container = document.getElementById(containerId);        container.innerHTML = '';                tickets.forEach(ticket => {            const row = document.createElement('tr');            row.innerHTML = `                <td>#${ticket.id}</td>                <td>${ticket.title}</td>                ${userType === 'user' ? '' : `<td>${ticket.user_name}</td>`}                <td><span class="status-badge status-${ticket.status_slug}">${ticket.status_name}</span></td>                <td><span class="priority-badge priority-${ticket.priority_name.toLowerCase()}">${ticket.priority_name}</span></td>                ${userType === 'admin' ? `<td>${ticket.assigned_to_name || 'Não atribuído'}</td>` : ''}                <td>${this.formatDate(ticket.created_at)}</td>                <td>                    <div class="action-buttons">                        <button class="btn btn-sm btn-info" onclick="helpDesk.showTicketDetails(${ticket.id})">                            <i class="fas fa-eye"></i> Ver                        </button>                        ${this.getTicketActions(ticket, userType)}                    </div>                </td>            `;            container.appendChild(row);        });    }    getTicketActions(ticket, userType) {        let actions = '';                if (userType === 'support' || userType === 'admin') {            if (ticket.status_slug === 'aberto') {                actions += `<button class="btn btn-sm btn-warning" onclick="helpDesk.updateTicketStatus(${ticket.id}, 'em_andamento', ${this.currentUser.id})">                    <i class="fas fa-play"></i> Iniciar                </button>`;            } else if (ticket.status_slug === 'em_andamento') {                actions += `<button class="btn btn-sm btn-success" onclick="helpDesk.updateTicketStatus(${ticket.id}, 'fechado')">                    <i class="fas fa-check"></i> Fechar                </button>`;            }        }                if (userType === 'admin') {            if (ticket.status_slug !== 'fechado') {                actions += `<button class="btn btn-sm btn-danger" onclick="helpDesk.deleteTicket(${ticket.id})">                    <i class="fas fa-trash"></i> Excluir                </button>`;            }        }                return actions;    }    async showTicketDetails(ticketId) {        try {            const response = await this.apiRequest(`tickets/${ticketId}`);            const ticket = response.data;                        document.getElementById('modalTitle').textContent = `Chamado #${ticket.id}`;            document.getElementById('modalBody').innerHTML = `                <div class="ticket-details">                    <div class="detail-row">                        <strong>Título:</strong> ${ticket.title}                    </div>                    <div class="detail-row">                        <strong>Descrição:</strong> ${ticket.description}                    </div>                    <div class="detail-row">                        <strong>Categoria:</strong> ${ticket.category_name}                    </div>                    <div class="detail-row">                        <strong>Prioridade:</strong> <span class="priority-badge priority-${ticket.priority_name.toLowerCase()}">${ticket.priority_name}</span>                    </div>                    <div class="detail-row">                        <strong>Status:</strong> <span class="status-badge status-${ticket.status_slug}">${ticket.status_name}</span>                    </div>                    <div class="detail-row">                        <strong>Usuário:</strong> ${ticket.user_name}                    </div>                    ${ticket.assigned_to_name ? `<div class="detail-row"><strong>Atribuído a:</strong> ${ticket.assigned_to_name}</div>` : ''}                    <div class="detail-row">                        <strong>Criado em:</strong> ${this.formatDate(ticket.created_at)}                    </div>                    <div class="detail-row">                        <strong>Última atualização:</strong> ${this.formatDate(ticket.updated_at)}                    </div>                    ${ticket.closed_at ? `<div class="detail-row"><strong>Fechado em:</strong> ${this.formatDate(ticket.closed_at)}</div>` : ''}                </div>            `;                        document.getElementById('ticketModal').style.display = 'block';        } catch (error) {            alert('Erro ao carregar detalhes do chamado: ' + error.message);        }    }    // User Management    async loadUsers() {        try {            const response = await this.apiRequest('users');            this.renderUsers(response.data.users);        } catch (error) {            console.error('Erro ao carregar usuários:', error);        }    }    renderUsers(users) {        const container = document.getElementById('usersBody');        container.innerHTML = '';                users.forEach(user => {            const row = document.createElement('tr');            row.innerHTML = `                <td>${user.id}</td>                <td>${user.name}</td>                <td>${user.email}</td>                <td>${this.getUserTypeText(user.user_type)}</td>                <td><span class="status-badge ${user.active ? 'status-fechado' : 'status-aberto'}">${user.active ? 'Ativo' : 'Inativo'}</span></td>                <td>${this.formatDate(user.created_at)}</td>                <td>                    <div class="action-buttons">                        <button class="btn btn-sm btn-info" onclick="helpDesk.showUserModal(${user.id})">                            <i class="fas fa-edit"></i> Editar                        </button>                        <button class="btn btn-sm btn-danger" onclick="helpDesk.toggleUserStatus(${user.id})">                            <i class="fas fa-toggle-${user.active ? 'on' : 'off'}"></i> ${user.active ? 'Desativar' : 'Ativar'}                        </button>                    </div>                </td>            `;            container.appendChild(row);        });    }    async showUserModal(userId = null) {        if (userId) {            try {                const response = await this.apiRequest(`users/${userId}`);                const user = response.data;                                document.getElementById('userModalTitle').textContent = 'Editar Usuário';                document.getElementById('userName').value = user.name;                document.getElementById('userEmail').value = user.email;                document.getElementById('userType').value = user.user_type;                document.getElementById('userPassword').value = '';                document.getElementById('userPassword').required = false;            } catch (error) {                alert('Erro ao carregar usuário: ' + error.message);                return;            }        } else {            document.getElementById('userModalTitle').textContent = 'Adicionar Usuário';            document.getElementById('userForm').reset();            document.getElementById('userPassword').required = true;        }                document.getElementById('userModal').style.display = 'block';    }    async handleUserForm(e) {        e.preventDefault();        const formData = new FormData(e.target);                const userData = {            name: formData.get('name'),            email: formData.get('email'),            password: formData.get('password'),            user_type: formData.get('type')        };                try {            this.showLoading(true);                        const existingUser = Array.from(e.target.querySelectorAll('input')).some(input => input.value && input.dataset.userId);                        if (existingUser) {                const userId = parseInt(e.target.dataset.userId);                await this.apiRequest(`users/${userId}`, 'PUT', userData);            } else {                await this.apiRequest('users', 'POST', userData);            }                        await this.loadUsers();            this.closeModals();            alert('Usuário salvo com sucesso!');                    } catch (error) {            alert('Erro ao salvar usuário: ' + error.message);        } finally {            this.showLoading(false);        }    }    async toggleUserStatus(userId) {        try {            await this.apiRequest(`users/${userId}/toggle-status`, 'POST');            await this.loadUsers();        } catch (error) {            alert('Erro ao alterar status do usuário: ' + error.message);        }    }    async populateUserFilter() {        try {            const response = await this.apiRequest('users');            const filter = document.getElementById('adminUserFilter');            const currentInnerHTML = filter.innerHTML;            filter.innerHTML = currentInnerHTML;                        response.data.users.forEach(user => {                const option = document.createElement('option');                option.value = user.id;                option.textContent = user.name;                filter.appendChild(option);            });        } catch (error) {            console.error('Erro ao carregar filtro de usuários:', error);        }    }    // Helper Methods    async loadCategories() {        try {            const response = await this.apiRequest('categories');            this.categories = response.data;        } catch (error) {            console.error('Erro ao carregar categorias:', error);        }    }    async loadPriorities() {        try {            const response = await this.apiRequest('priorities');            this.priorities = response.data;        } catch (error) {            console.error('Erro ao carregar prioridades:', error);        }    }    async loadStatuses() {        try {            const response = await this.apiRequest('statuses');            this.statuses = response.data;        } catch (error) {            console.error('Erro ao carregar status:', error);        }    }    async getCategoryId(categoryName) {        if (!this.categories) await this.loadCategories();        const category = this.categories.find(c => c.name.toLowerCase() === categoryName.toLowerCase());        return category ? category.id : 1;    }    async getPriorityId(priorityName) {        if (!this.priorities) await this.loadPriorities();        const priority = this.priorities.find(p => p.name.toLowerCase() === priorityName.toLowerCase());        return priority ? priority.id : 2;    }    async getStatusId(statusSlug) {        if (!this.statuses) await this.loadStatuses();        const status = this.statuses.find(s => s.slug === statusSlug);        return status ? status.id : 1;    }    // Charts and Reports    async loadCharts() {        await this.loadStatusChart();        await this.loadPriorityChart();        await this.loadAgentChart();        await this.updateResolutionTimeStats();    }    async loadStatusChart() {        try {            const response = await this.apiRequest('dashboard/status-chart');            const data = response.data;                        const ctx = document.getElementById('statusChart').getContext('2d');            new Chart(ctx, {                type: 'doughnut',                data: {                    labels: data.labels,                    datasets: [{                        data: data.values,                        backgroundColor: data.colors                    }]                },                options: {                    responsive: true,                    maintainAspectRatio: false                }            });        } catch (error) {            console.error('Erro ao carregar gráfico de status:', error);        }    }    async loadPriorityChart() {        try {            const response = await this.apiRequest('dashboard/priority-chart');            const data = response.data;                        const ctx = document.getElementById('priorityChart').getContext('2d');            new Chart(ctx, {                type: 'bar',                data: {                    labels: data.labels,                    datasets: [{                        data: data.values,                        backgroundColor: data.colors                    }]                },                options: {                    responsive: true,                    maintainAspectRatio: false,                    scales: {                        y: {                            beginAtZero: true                        }                    }                }            });        } catch (error) {            console.error('Erro ao carregar gráfico de prioridades:', error);        }    }    async loadAgentChart() {        try {            const response = await this.apiRequest('dashboard/agent-chart');            const data = response.data;                        const ctx = document.getElementById('agentChart').getContext('2d');            new Chart(ctx, {                type: 'horizontalBar',                data: {                    labels: data.labels,                    datasets: [{                        data: data.values,                        backgroundColor: '#3b82f6'                    }]                },                options: {                    responsive: true,                    maintainAspectRatio: false,                    scales: {                        x: {                            beginAtZero: true                        }                    }                }            });        } catch (error) {            console.error('Erro ao carregar gráfico de agentes:', error);        }    }    async updateResolutionTimeStats() {        try {            const response = await this.apiRequest('dashboard/resolution-stats');            const stats = response.data;                        document.getElementById('avgResolution').textContent = Math.round(stats.avg || 0) + 'h';            document.getElementById('minResolution').textContent = Math.round(stats.min || 0) + 'h';            document.getElementById('maxResolution').textContent = Math.round(stats.max || 0) + 'h';        } catch (error) {            console.error('Erro ao carregar estatísticas de resolução:', error);        }    }    // Tab Management    switchTab(tabName) {        document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));        document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));                document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');        document.getElementById(`${tabName}Tab`).classList.add('active');                if (tabName === 'reports') {            this.loadCharts();        }    }    // Utility Functions    getUserTypeText(type) {        const typeMap = {            'user': 'Usuário Padrão',            'support': 'Suporte',            'admin': 'Administrador'        };        return typeMap[type] || type;    }    formatDate(dateString) {        return new Date(dateString).toLocaleDateString('pt-BR', {            day: '2-digit',            month: '2-digit',            year: 'numeric',            hour: '2-digit',            minute: '2-digit'        });    }    // Modal Management    closeModals() {        document.querySelectorAll('.modal').forEach(modal => {            modal.style.display = 'none';        });    }    // Mobile Navigation    toggleMobileNav() {        const navToggle = document.getElementById('navToggle');        const navMenu = document.getElementById('navMenu');                navToggle.classList.toggle('active');        navMenu.classList.toggle('active');    }    // Loading State    showLoading(show) {        const buttons = document.querySelectorAll('.btn');        buttons.forEach(btn => {            if (show) {                btn.disabled = true;                btn.innerHTML = '<span class="loading"></span> Carregando...';            } else {                btn.disabled = false;                // Restaurar texto original seria necessário aqui            }        });    }}// Initialize the systemconst helpDesk = new HelpDeskSystemAPI();