<?php// Configuração de Produção - Sistema Help Desk Controll IT// Copie este arquivo para api/config.php e ajuste conforme necessário// Configuração do banco de dadosdefine('DB_HOST', 'localhost');define('DB_NAME', 'helpdesk_titanium');define('DB_USER', 'helpdesk_user');define('DB_PASS', 'sua_senha_segura_aqui');define('DB_CHARSET', 'utf8mb4');// Configurações de segurançadefine('JWT_SECRET', 'sua_chave_secreta_muito_segura_aqui_' . bin2hex(random_bytes(32)));define('JWT_EXPIRY', 3600); // 1 horadefine('PASSWORD_HASH_ALGO', PASSWORD_BCRYPT);define('PASSWORD_COST', 12);// Configurações de uploaddefine('UPLOAD_PATH', __DIR__ . '/uploads/');define('MAX_FILE_SIZE', 10 * 1024 * 1024); // 10MBdefine('ALLOWED_EXTENSIONS', ['jpg', 'jpeg', 'png', 'gif', 'pdf', 'doc', 'docx', 'xls', 'xlsx', 'txt']);// Configurações do sistemadefine('SYSTEM_NAME', 'Controll IT Help Desk');define('SYSTEM_EMAIL', 'suporte@controllit.com.br');define('SYSTEM_URL', 'https://helpdesk.controllit.com');// Configurações de email (SMTP)define('SMTP_HOST', 'smtp.gmail.com');define('SMTP_PORT', 587);define('SMTP_USERNAME', 'seu-email@controllit.com.br');define('SMTP_PASSWORD', 'sua-senha-app');define('SMTP_ENCRYPTION', 'tls');// Configurações de segurança adicionaldefine('RATE_LIMIT_MAX_ATTEMPTS', 5);define('RATE_LIMIT_TIME_WINDOW', 300); // 5 minutosdefine('SESSION_TIMEOUT', 3600); // 1 hora// Configurações de backupdefine('BACKUP_PATH', '/backup/helpdesk/');define('BACKUP_RETENTION_DAYS', 30);// Configurações de logdefine('LOG_LEVEL', 'INFO'); // DEBUG, INFO, WARNING, ERRORdefine('LOG_PATH', __DIR__ . '/logs/');// Configurações de cache (Redis/Memcached)define('CACHE_ENABLED', false);define('CACHE_HOST', 'localhost');define('CACHE_PORT', 6379);define('CACHE_PASSWORD', '');// Configurações de monitoramentodefine('MONITORING_ENABLED', true);define('ALERT_EMAIL', 'admin@controllit.com.br');// Configurações de SLAdefine('SLA_BAIXA_HORAS', 72);    // 3 diasdefine('SLA_MEDIA_HORAS', 48);    // 2 diasdefine('SLA_ALTA_HORAS', 24);     // 1 diadefine('SLA_CRITICA_HORAS', 4);  // 4 horas// Configurações de notificaçãodefine('NOTIFICATION_EMAIL_ENABLED', true);define('NOTIFICATION_SMS_ENABLED', false);define('NOTIFICATION_PUSH_ENABLED', false);// Configurações de integraçãodefine('LDAP_ENABLED', false);define('LDAP_HOST', 'ldap.controllit.com');define('LDAP_PORT', 389);define('LDAP_BASE_DN', 'dc=controllit,dc=com');// Configurações de APIdefine('API_VERSION', 'v1');define('API_RATE_LIMIT', 1000); // requests per hourdefine('API_CORS_ENABLED', true);// Configurações de desenvolvimentodefine('DEBUG_MODE', false);define('SHOW_ERRORS', false);define('LOG_QUERIES', false);// Headers de segurançaheader('X-Content-Type-Options: nosniff');header('X-Frame-Options: DENY');header('X-XSS-Protection: 1; mode=block');header('Referrer-Policy: strict-origin-when-cross-origin');// Headers CORSif (API_CORS_ENABLED) {    header('Access-Control-Allow-Origin: *');    header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');    header('Access-Control-Allow-Headers: Content-Type, Authorization');}// Tratar requisições OPTIONS (preflight)if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {    http_response_code(200);    exit();}// Configurações de timezonedate_default_timezone_set('America/Sao_Paulo');// Configurações de sessãoini_set('session.cookie_httponly', 1);ini_set('session.cookie_secure', 1);ini_set('session.use_strict_mode', 1);ini_set('session.cookie_samesite', 'Strict');// Configurações de uploadini_set('upload_max_filesize', '10M');ini_set('post_max_size', '10M');ini_set('max_execution_time', 300);ini_set('max_input_time', 300);// Configurações de memóriaini_set('memory_limit', '256M');// Configurações de erroif (!DEBUG_MODE) {    error_reporting(0);    ini_set('display_errors', 0);    ini_set('log_errors', 1);    ini_set('error_log', LOG_PATH . 'error.log');}// Função para log de sistemafunction systemLog($level, $message, $context = []) {    if (!defined('LOG_LEVEL')) return;        $levels = ['DEBUG' => 0, 'INFO' => 1, 'WARNING' => 2, 'ERROR' => 3];    $currentLevel = $levels[LOG_LEVEL] ?? 1;    $messageLevel = $levels[$level] ?? 1;        if ($messageLevel >= $currentLevel) {        $timestamp = date('Y-m-d H:i:s');        $logMessage = "[{$timestamp}] [{$level}] {$message}";                if (!empty($context)) {            $logMessage .= ' ' . json_encode($context);        }                error_log($logMessage);    }}// Função para verificar saúde do sistemafunction checkSystemHealth() {    $health = [        'database' => false,        'uploads' => false,        'logs' => false,        'email' => false    ];        try {        // Verificar banco de dados        $db = new Database();        $conn = $db->getConnection();        $conn->query('SELECT 1');        $health['database'] = true;    } catch (Exception $e) {        systemLog('ERROR', 'Database health check failed: ' . $e->getMessage());    }        // Verificar diretório de uploads    if (is_dir(UPLOAD_PATH) && is_writable(UPLOAD_PATH)) {        $health['uploads'] = true;    }        // Verificar diretório de logs    if (is_dir(LOG_PATH) && is_writable(LOG_PATH)) {        $health['logs'] = true;    }        // Verificar configuração de email    if (defined('SMTP_HOST') && !empty(SMTP_HOST)) {        $health['email'] = true;    }        return $health;}// Função para backup automáticofunction performBackup() {    if (!is_dir(BACKUP_PATH)) {        mkdir(BACKUP_PATH, 0755, true);    }        $timestamp = date('Y-m-d_H-i-s');    $backupFile = BACKUP_PATH . "helpdesk_backup_{$timestamp}.sql";        $command = "mysqldump -h " . DB_HOST . " -u " . DB_USER . " -p" . DB_PASS . " " . DB_NAME . " > " . $backupFile;        exec($command, $output, $returnCode);        if ($returnCode === 0) {        systemLog('INFO', "Backup created successfully: {$backupFile}");                // Limpar backups antigos        $files = glob(BACKUP_PATH . "helpdesk_backup_*.sql");        $cutoff = time() - (BACKUP_RETENTION_DAYS * 24 * 60 * 60);                foreach ($files as $file) {            if (filemtime($file) < $cutoff) {                unlink($file);            }        }                return true;    } else {        systemLog('ERROR', 'Backup failed: ' . implode("\n", $output));        return false;    }}// Função para limpeza de logs antigosfunction cleanupOldLogs() {    $logFiles = glob(LOG_PATH . "*.log");    $cutoff = time() - (30 * 24 * 60 * 60); // 30 dias        foreach ($logFiles as $file) {        if (filemtime($file) < $cutoff) {            unlink($file);        }    }        systemLog('INFO', 'Old logs cleaned up');}// Função para monitoramento de SLAfunction checkSLAViolations() {    try {        $db = new Database();        $conn = $db->getConnection();                $query = "            SELECT t.id, t.title, t.created_at, tp.name as priority, u.name as user_name, u.email            FROM tickets t            LEFT JOIN ticket_priorities tp ON t.priority_id = tp.id            LEFT JOIN users u ON t.user_id = u.id            WHERE t.status_id NOT IN (SELECT id FROM ticket_statuses WHERE is_final = 1)            AND t.created_at < DATE_SUB(NOW(), INTERVAL                 CASE tp.name                    WHEN 'Crítica' THEN " . SLA_CRITICA_HORAS . "                    WHEN 'Alta' THEN " . SLA_ALTA_HORAS . "                    WHEN 'Média' THEN " . SLA_MEDIA_HORAS . "                    ELSE " . SLA_BAIXA_HORAS . "                END HOUR)        ";                $stmt = $conn->prepare($query);        $stmt->execute();        $violations = $stmt->fetchAll();                if (!empty($violations) && MONITORING_ENABLED) {            $message = "SLA Violations detected:\n";            foreach ($violations as $violation) {                $message .= "- Ticket #{$violation['id']}: {$violation['title']} (Priority: {$violation['priority']})\n";            }                        systemLog('WARNING', $message);                        // Enviar alerta por email            if (NOTIFICATION_EMAIL_ENABLED) {                mail(ALERT_EMAIL, 'SLA Violations Alert', $message);            }        }                return $violations;            } catch (Exception $e) {        systemLog('ERROR', 'SLA check failed: ' . $e->getMessage());        return [];    }}// Inicializar sistemaif (DEBUG_MODE) {    systemLog('DEBUG', 'System initialized in debug mode');} else {    systemLog('INFO', 'System initialized in production mode');}// Verificar saúde do sistema$health = checkSystemHealth();if (!$health['database']) {    systemLog('ERROR', 'Critical system health check failed');    if (!DEBUG_MODE) {        http_response_code(503);        exit('Service temporarily unavailable');    }}?>