<?php// Verificar e corrigir banco de dadosheader('Content-Type: application/json; charset=utf-8');header('Access-Control-Allow-Origin: *');header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');header('Access-Control-Allow-Headers: Content-Type, Authorization');// Tratar requisições OPTIONS (preflight)if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {    http_response_code(200);    exit();}try {    // Incluir configuração    require_once 'api/config.php';        $db = new Database();    $conn = $db->getConnection();        $results = [];        // Verificar se as tabelas existem    $tables = ['users', 'tickets', 'categories', 'access_logs'];    $existingTables = [];    $missingTables = [];        foreach ($tables as $table) {        $stmt = $conn->query("SHOW TABLES LIKE '$table'");        if ($stmt->fetch()) {            $existingTables[] = $table;        } else {            $missingTables[] = $table;        }    }        $results['tables'] = [        'existing' => $existingTables,        'missing' => $missingTables    ];        // Se a tabela users não existe, criar    if (in_array('users', $missingTables)) {        $createUsersTable = "            CREATE TABLE users (                id INT AUTO_INCREMENT PRIMARY KEY,                name VARCHAR(100) NOT NULL,                email VARCHAR(100) UNIQUE NOT NULL,                username VARCHAR(50) UNIQUE NOT NULL,                password_hash VARCHAR(255) NOT NULL,                user_type ENUM('user', 'support', 'admin') DEFAULT 'user',                active BOOLEAN DEFAULT TRUE,                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP            )        ";        $conn->exec($createUsersTable);        $results['created_tables'][] = 'users';    }        // Se a tabela tickets não existe, criar    if (in_array('tickets', $missingTables)) {        $createTicketsTable = "            CREATE TABLE tickets (                id INT AUTO_INCREMENT PRIMARY KEY,                title VARCHAR(200) NOT NULL,                description TEXT NOT NULL,                status ENUM('open', 'in_progress', 'resolved', 'closed') DEFAULT 'open',                priority ENUM('low', 'medium', 'high', 'urgent') DEFAULT 'medium',                category VARCHAR(50) DEFAULT 'other',                user_id INT NOT NULL,                assigned_to INT NULL,                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,                closed_at TIMESTAMP NULL,                FOREIGN KEY (user_id) REFERENCES users(id),                FOREIGN KEY (assigned_to) REFERENCES users(id)            )        ";        $conn->exec($createTicketsTable);        $results['created_tables'][] = 'tickets';    }        // Verificar se existem usuários    $stmt = $conn->query("SELECT COUNT(*) as count FROM users");    $userCount = $stmt->fetch()['count'];        // Se não há usuários, criar usuários padrão    if ($userCount == 0) {        $users = [            [                'name' => 'Administrador',                'email' => 'admin@controllit.com.br',                'username' => 'admin',                'password' => hashPassword('admin123'),                'user_type' => 'admin'            ],            [                'name' => 'Agente de Suporte',                'email' => 'suporte@controllit.com.br',                'username' => 'suporte',                'password' => hashPassword('suporte123'),                'user_type' => 'support'            ],            [                'name' => 'Usuário Padrão',                'email' => 'usuario@controllit.com.br',                'username' => 'usuario',                'password' => hashPassword('usuario123'),                'user_type' => 'user'            ]        ];                $stmt = $conn->prepare("            INSERT INTO users (name, email, username, password_hash, user_type)             VALUES (?, ?, ?, ?, ?)        ");                foreach ($users as $user) {            $stmt->execute([                $user['name'],                $user['email'],                $user['username'],                $user['password'],                $user['user_type']            ]);        }                $results['created_users'] = count($users);    }        // Verificar se existem tickets    $stmt = $conn->query("SELECT COUNT(*) as count FROM tickets");    $ticketCount = $stmt->fetch()['count'];        // Se não há tickets, criar alguns tickets de exemplo    if ($ticketCount == 0) {        $tickets = [            [                'title' => 'Problema com impressora',                'description' => 'A impressora não está funcionando corretamente.',                'status' => 'open',                'priority' => 'medium',                'category' => 'hardware',                'user_id' => 3            ],            [                'title' => 'Sistema lento',                'description' => 'O sistema está muito lento.',                'status' => 'in_progress',                'priority' => 'high',                'category' => 'software',                'user_id' => 3            ]        ];                $stmt = $conn->prepare("            INSERT INTO tickets (title, description, status, priority, category, user_id)             VALUES (?, ?, ?, ?, ?, ?)        ");                foreach ($tickets as $ticket) {            $stmt->execute([                $ticket['title'],                $ticket['description'],                $ticket['status'],                $ticket['priority'],                $ticket['category'],                $ticket['user_id']            ]);        }                $results['created_tickets'] = count($tickets);    }        echo json_encode([        'success' => true,        'message' => 'Banco de dados verificado e corrigido',        'results' => $results,        'timestamp' => date('Y-m-d H:i:s')    ]);    } catch (Exception $e) {    http_response_code(500);    echo json_encode([        'success' => false,        'message' => 'Erro ao verificar banco de dados',        'error' => $e->getMessage(),        'timestamp' => date('Y-m-d H:i:s')    ]);}?>