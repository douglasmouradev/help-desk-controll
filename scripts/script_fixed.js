// Sistema Help Desk - Controll IT Engineering Technology (Versão Corrigida)class HelpDeskSystem {    constructor() {        this.currentUser = null;        this.apiBaseUrl = 'api/';        this.authToken = localStorage.getItem('authToken');                this.init();    }    init() {        this.setupEventListeners();                // Verificar se já está logado        if (this.authToken) {            this.verifyToken();        } else {            this.showPage('loginPage');        }    }        // Métodos de comunicação com API    async apiCall(endpoint, method = 'GET', data = null, requiresAuth = true) {        const url = this.apiBaseUrl + endpoint;        const options = {            method: method,            headers: {                'Content-Type': 'application/json',            }        };                if (requiresAuth && this.authToken) {            options.headers['Authorization'] = 'Bearer ' + this.authToken;        }                if (data) {            options.body = JSON.stringify(data);        }                try {            const response = await fetch(url, options);            const result = await response.json();                        if (!response.ok) {                throw new Error(result.message || 'Erro na requisição');            }                        return result;        } catch (error) {            console.error('Erro na API:', error);            throw error;        }    }        async verifyToken() {        try {            const result = await this.apiCall('auth.php?action=profile');            this.currentUser = result.data;            this.login(this.currentUser);        } catch (error) {            this.logout();        }    }    // Event Listeners    setupEventListeners() {        // Login form        document.getElementById('loginForm').addEventListener('submit', (e) => this.handleLogin(e));                // Forgot password        document.getElementById('forgotPasswordLink').addEventListener('click', (e) => {            e.preventDefault();            this.showForgotPasswordModal();        });                // Forgot password form        document.getElementById('forgotPasswordForm').addEventListener('submit', (e) => this.handleForgotPassword(e));                // Logout buttons        document.getElementById('logoutBtn').addEventListener('click', () => this.logout());        document.getElementById('supportLogoutBtn').addEventListener('click', () => this.logout());        document.getElementById('adminLogoutBtn').addEventListener('click', () => this.logout());                // New ticket form        document.getElementById('newTicketForm').addEventListener('submit', (e) => this.handleNewTicket(e));                // Admin tabs        document.querySelectorAll('.tab-btn').forEach(btn => {            btn.addEventListener('click', (e) => this.switchTab(e.target.dataset.tab));        });                // Filters        document.getElementById('statusFilter').addEventListener('change', () => this.filterSupportTickets());        document.getElementById('priorityFilter').addEventListener('change', () => this.filterSupportTickets());        document.getElementById('adminStatusFilter').addEventListener('change', () => this.filterAdminTickets());        document.getElementById('adminPriorityFilter').addEventListener('change', () => this.filterAdminTickets());        document.getElementById('adminUserFilter').addEventListener('change', () => this.filterAdminTickets());                // User management        document.getElementById('addUserBtn').addEventListener('click', () => this.showUserModal());        document.getElementById('userForm').addEventListener('submit', (e) => this.handleUserSubmit(e));    }    // Authentication    async handleLogin(e) {        e.preventDefault();        const username = document.getElementById('username').value;        const password = document.getElementById('password').value;                // Mostrar loading        const submitBtn = e.target.querySelector('button[type="submit"]');        const originalText = submitBtn.textContent;        submitBtn.textContent = 'Entrando...';        submitBtn.disabled = true;                try {            console.log('Tentando login com:', username);                        const result = await this.apiCall('auth.php?action=login', 'POST', {                username: username,                password: password            }, false);                        console.log('Resultado do login:', result);                        if (result.success && result.data) {                this.authToken = result.data.token;                this.currentUser = result.data.user;                                localStorage.setItem('authToken', this.authToken);                                console.log('Redirecionando para dashboard...');                this.login(this.currentUser);                                // Limpar formulário                document.getElementById('loginForm').reset();                                // Não mostrar alert de sucesso, apenas redirecionar                return;            } else {                throw new Error('Resposta inválida da API');            }                    } catch (error) {            console.error('Erro no login:', error);            // Mostrar erro apenas se realmente houver erro            if (error.message.includes('Usuário ou senha incorretos') ||                 error.message.includes('incorretos') ||                error.message.includes('incorrect')) {                alert('Usuário ou senha incorretos!');            } else {                alert('Erro no sistema. Tente novamente.');            }        } finally {            // Restaurar botão            submitBtn.textContent = originalText;            submitBtn.disabled = false;        }    }        showForgotPasswordModal() {        document.getElementById('forgotPasswordModal').style.display = 'block';    }    handleForgotPassword(e) {        e.preventDefault();        const email = document.getElementById('forgotEmail').value;        const username = document.getElementById('forgotUsername').value;                // Verificar se o usuário existe        const user = this.users.find(u => u.email === email && u.username === username);                if (user) {            // Simular envio de email (em produção, integrar com serviço de email)            alert('Link de recuperação enviado para o email cadastrado!');            this.closeModals();        } else {            alert('Email ou usuário não encontrado!');        }    }    login(user) {        this.currentUser = user;                console.log('Usuário logado:', user);                switch(user.type) {            case 'user':                this.showUserDashboard();                break;            case 'support':                this.showSupportDashboard();                break;            case 'admin':                this.showAdminDashboard();                break;            default:                console.error('Tipo de usuário desconhecido:', user.type);                alert('Tipo de usuário não reconhecido: ' + user.type);        }                this.updateNavigation();    }    async logout() {        try {            if (this.authToken) {                await this.apiCall('auth.php?action=logout', 'POST');            }        } catch (error) {            console.error('Erro no logout:', error);            // Não mostrar erro para o usuário, apenas logar        } finally {            this.currentUser = null;            this.authToken = null;            localStorage.removeItem('authToken');            this.showPage('loginPage');            this.updateNavigation();            document.getElementById('loginForm').reset();        }    }    // Dashboard Management    showUserDashboard() {        this.showPage('userDashboard');                const userNameElement = document.getElementById('userName');        if (userNameElement) {            userNameElement.textContent = this.currentUser.name;        } else {            console.warn('Elemento userName não encontrado no HTML');        }                this.loadUserTickets();    }    showSupportDashboard() {        this.showPage('supportDashboard');                const supportNameElement = document.getElementById('supportName');        if (supportNameElement) {            supportNameElement.textContent = this.currentUser.name;        } else {            console.warn('Elemento supportName não encontrado no HTML');        }                this.loadSupportTickets();    }    showAdminDashboard() {        this.showPage('adminDashboard');                // Verificar se o elemento existe antes de tentar acessá-lo        const adminNameElement = document.getElementById('adminName');        if (adminNameElement) {            adminNameElement.textContent = this.currentUser.name;        } else {            console.warn('Elemento adminName não encontrado no HTML');        }                this.loadAdminTickets();        this.loadUsers();    }    // Page Management    showPage(pageId) {        const pages = ['loginPage', 'userDashboard', 'supportDashboard', 'adminDashboard'];        pages.forEach(page => {            document.getElementById(page).style.display = page === pageId ? 'block' : 'none';        });    }    updateNavigation() {        // Atualizar navegação baseada no tipo de usuário        const userType = this.currentUser ? this.currentUser.type : null;                // Mostrar/ocultar elementos baseado no tipo de usuário        const userElements = document.querySelectorAll('.user-only');        const supportElements = document.querySelectorAll('.support-only');        const adminElements = document.querySelectorAll('.admin-only');                userElements.forEach(el => el.style.display = userType === 'user' ? 'block' : 'none');        supportElements.forEach(el => el.style.display = userType === 'support' ? 'block' : 'none');        adminElements.forEach(el => el.style.display = userType === 'admin' ? 'block' : 'none');    }    // Ticket Management    async loadUserTickets() {        try {            const result = await this.apiCall('tickets.php?action=list');            this.displayTickets(result.data, 'userTicketsList');            this.updateTicketCounters(result.data);        } catch (error) {            console.error('Erro ao carregar tickets:', error);        }    }    async loadSupportTickets() {        try {            const result = await this.apiCall('tickets.php?action=list');            this.displayTickets(result.data, 'supportTicketsList');            this.updateTicketCounters(result.data);        } catch (error) {            console.error('Erro ao carregar tickets:', error);        }    }    async loadAdminTickets() {        try {            const result = await this.apiCall('tickets.php?action=list');            this.displayTickets(result.data, 'adminTicketsList');            this.updateTicketCounters(result.data);        } catch (error) {            console.error('Erro ao carregar tickets:', error);        }    }    // Atualizar contadores de tickets    updateTicketCounters(tickets) {        if (!tickets || !Array.isArray(tickets)) return;        // Contar tickets por status        const counters = {            open: 0,            in_progress: 0,            resolved: 0,            closed: 0,            total: tickets.length        };        tickets.forEach(ticket => {            if (ticket.status === 'open') counters.open++;            else if (ticket.status === 'in_progress') counters.in_progress++;            else if (ticket.status === 'resolved') counters.resolved++;            else if (ticket.status === 'closed') counters.closed++;        });        // Atualizar elementos na tela        this.updateCounterElement('userOpenTickets', counters.open);        this.updateCounterElement('userPendingTickets', counters.in_progress);        this.updateCounterElement('userResolvedTickets', counters.resolved);        this.updateCounterElement('userClosedTickets', counters.closed);        this.updateCounterElement('userTotalTickets', counters.total);        // Contadores para suporte        this.updateCounterElement('supportOpenTickets', counters.open);        this.updateCounterElement('supportPendingTickets', counters.in_progress);        this.updateCounterElement('supportResolvedTickets', counters.resolved);        this.updateCounterElement('supportClosedTickets', counters.closed);        this.updateCounterElement('supportTotalTickets', counters.total);        // Contadores para admin        this.updateCounterElement('adminOpenTickets', counters.open);        this.updateCounterElement('adminPendingTickets', counters.in_progress);        this.updateCounterElement('adminResolvedTickets', counters.resolved);        this.updateCounterElement('adminClosedTickets', counters.closed);        this.updateCounterElement('adminTotalTickets', counters.total);        console.log('Contadores atualizados:', counters);    }    updateCounterElement(elementId, value) {        const element = document.getElementById(elementId);        if (element) {            element.textContent = value;        }    }    displayTickets(tickets, containerId) {        const container = document.getElementById(containerId);        if (!container) {            console.warn('Container não encontrado:', containerId);            return;        }        console.log('Exibindo tickets:', tickets, 'no container:', containerId);        if (!tickets || tickets.length === 0) {            container.innerHTML = '<p>Nenhum ticket encontrado.</p>';            return;        }        // Criar tabela de tickets        container.innerHTML = `            <table class="tickets-table">                <thead>                    <tr>                        <th>ID</th>                        <th>Título</th>                        <th>Status</th>                        <th>Prioridade</th>                        <th>Usuário</th>                        <th>Data</th>                        <th>Ações</th>                    </tr>                </thead>                <tbody>                    ${tickets.map(ticket => `                        <tr>                            <td>#${ticket.id}</td>                            <td>${ticket.title}</td>                            <td><span class="status status-${ticket.status}">${this.getStatusText(ticket.status)}</span></td>                            <td><span class="priority priority-${ticket.priority}">${this.getPriorityText(ticket.priority)}</span></td>                            <td>${ticket.user_name || 'N/A'}</td>                            <td>${new Date(ticket.created_at).toLocaleDateString('pt-BR')}</td>                            <td>                                <button class="btn btn-sm btn-primary" onclick="helpDesk.viewTicket(${ticket.id})">Ver</button>                                ${this.currentUser && this.currentUser.type !== 'user' ? `                                    <button class="btn btn-sm btn-secondary" onclick="helpDesk.editTicket(${ticket.id})">Editar</button>                                ` : ''}                            </td>                        </tr>                    `).join('')}                </tbody>            </table>        `;    }    getStatusText(status) {        const statusMap = {            'open': 'Aberto',            'in_progress': 'Em Andamento',            'resolved': 'Resolvido',            'closed': 'Fechado'        };        return statusMap[status] || status;    }    getPriorityText(priority) {        const priorityMap = {            'low': 'Baixa',            'medium': 'Média',            'high': 'Alta',            'urgent': 'Urgente'        };        return priorityMap[priority] || priority;    }    viewTicket(ticketId) {        alert('Visualizar ticket #' + ticketId + ' (funcionalidade em desenvolvimento)');    }    editTicket(ticketId) {        alert('Editar ticket #' + ticketId + ' (funcionalidade em desenvolvimento)');    }    // New Ticket    async handleNewTicket(e) {        e.preventDefault();        const formData = new FormData(e.target);        const ticketData = {            title: formData.get('title'),            description: formData.get('description'),            priority: formData.get('priority'),            category: formData.get('category')        };        try {            const result = await this.apiCall('tickets.php?action=create', 'POST', ticketData);            alert('Ticket criado com sucesso!');            e.target.reset();                        // Recarregar tickets baseado no tipo de usuário            if (this.currentUser) {                switch(this.currentUser.type) {                    case 'user':                        this.loadUserTickets();                        break;                    case 'support':                        this.loadSupportTickets();                        break;                    case 'admin':                        this.loadAdminTickets();                        break;                }            }        } catch (error) {            alert('Erro ao criar ticket: ' + error.message);        }    }    // Admin Functions    async loadUsers() {        try {            const result = await this.apiCall('users.php?action=list');            this.displayUsers(result.data);        } catch (error) {            console.error('Erro ao carregar usuários:', error);        }    }    displayUsers(users) {        const container = document.getElementById('usersList');        if (!container) return;        container.innerHTML = users.map(user => `            <div class="user-item">                <h3>${user.name}</h3>                <p>${user.email}</p>                <span class="user-type">${user.type}</span>            </div>        `).join('');    }    showUserModal() {        document.getElementById('userModal').style.display = 'block';    }    async handleUserSubmit(e) {        e.preventDefault();        const formData = new FormData(e.target);        const userData = {            username: formData.get('username'),            email: formData.get('email'),            name: formData.get('name'),            type: formData.get('type'),            department: formData.get('department'),            phone: formData.get('phone')        };        try {            const result = await this.apiCall('users.php?action=create', 'POST', userData);            alert('Usuário criado com sucesso!');            e.target.reset();            this.closeModals();            this.loadUsers();        } catch (error) {            alert('Erro ao criar usuário: ' + error.message);        }    }    closeModals() {        document.querySelectorAll('.modal').forEach(modal => {            modal.style.display = 'none';        });    }    // Filters    filterSupportTickets() {        // Implementar filtros        console.log('Filtrando tickets de suporte');    }    filterAdminTickets() {        // Implementar filtros        console.log('Filtrando tickets de admin');    }    switchTab(tabName) {        // Implementar troca de abas        console.log('Mudando para aba:', tabName);    }}// Inicializar sistemadocument.addEventListener('DOMContentLoaded', () => {    window.helpDesk = new HelpDeskSystem();});